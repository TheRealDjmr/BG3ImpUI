<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:ls="clr-namespace:ls;assembly=Code"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
	xmlns:System="clr-namespace:System;assembly=mscorlib"
	mc:Ignorable="d">


	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="/Core;component/Library/Radials_c.xaml"/>
		<ResourceDictionary Source="../Library/IUI_ActionResources.xaml"/>
		<ResourceDictionary Source="../Library/IUI_ActionResourceTemplates_c.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	<System:Double x:Key="UnfocusedRadialsSizeModifier">0.7</System:Double>
	<ImageSource x:Key="RadialBg">pack://application:,,,/Core;component/Assets/Radials/c_radial_bg_small.png</ImageSource>
	<ImageSource x:Key="RadialBgMetaMagicSwirlImage">pack://application:,,,/Core;component/Assets/Radials/metaMagicSwirl.png</ImageSource>
	<ImageSource x:Key="ActionDetailBGGrey">pack://application:,,,/Core;component/Assets/Radials/c_actionDetailsBG_grey.png</ImageSource>
	<ImageSource x:Key="IconShadeBG">pack://application:,,,/Core;component/Assets/Radials/c_iconbShade.png</ImageSource>
	<ImageSource x:Key="NotificationBg">pack://application:,,,/Core;component/Assets/Notification/smallNotice_bg.png</ImageSource>
	<ImageSource x:Key="PassiveActiveSpinner">pack://application:,,,/Core;component/Assets/Radials/c_activePassiveSpinner.png</ImageSource>

	<BitmapImage x:Key="CarouselArrow" UriSource="pack://application:,,,/Core;component/Assets/Shared_c/c_carousel_arrow_d.png"/>

	<Thickness x:Key="SlotPosition1">-172,-172,-172,-112</Thickness>
	<Thickness x:Key="SlotPosition2">-172,-172,-172,-92</Thickness>

	<System:Double x:Key="RadialAppearDelay">55</System:Double>

	<Storyboard x:Key="FadeInNotification" FillBehavior="Stop">
		<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ControlNotifcations">
			<LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
			<LinearDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
			<LinearDoubleKeyFrame KeyTime="0:0:1.2" Value="1" />
			<LinearDoubleKeyFrame KeyTime="0:0:1.5" Value="0" />
		</DoubleAnimationUsingKeyFrames>
		<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ControlNotifcations" Storyboard.TargetProperty="Visibility">
			<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
			<DiscreteObjectKeyFrame KeyTime="0:0:1.5" Value="{x:Static Visibility.Collapsed}"/>
		</ObjectAnimationUsingKeyFrames>
	</Storyboard>

	<Style x:Key="NotificationBG9Slice" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
		<Setter Property="ImageSource" Value="{StaticResource NotificationBg}" />
		<Setter Property="Slices" Value="24" />
		<Setter Property="MinWidth" Value="152" />
		<Setter Property="MinHeight" Value="40" />
		<Setter Property="Padding" Value="20,12,20,12" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Focusable" Value="False" />
	</Style>

	<Style TargetType="ls:PagedList">
		<Setter Property="FixedPageStyleWidth" Value="920" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ls:PagedList}">
					<Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
						<Canvas x:Name="PART_ItemContainer"  />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ActionDetailsBG9Slice" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
		<Setter Property="ImageSource" Value="{StaticResource ActionDetailBGGrey}" />
		<Setter Property="Slices" Value="12" />
		<Setter Property="MinWidth" Value="152" />
		<Setter Property="MinHeight" Value="40" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Focusable" Value="False" />
	</Style>

	<Style x:Key="MetaMagicAnimationStyle" TargetType="ls:AnimatedImage">
		<Setter Property="Template" Value="{StaticResource BaseAnimatedImage}"/>
		<Setter Property="Time" Value="0:0:0.033"/>
		<Setter Property="ClipSize" Value="216,240"/>
		<Setter Property="RenderTransform" >
			<Setter.Value>
				<TransformGroup>
					<ScaleTransform ScaleX="1.5" ScaleY="1.5" />
				</TransformGroup>
			</Setter.Value>
		</Setter>
		<Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
		<Setter Property="RepeatBehavior" Value="1x"/>
		<Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/BottomBar/VFX/popExplosion.png"/>
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="Visibility" Value="Hidden"/>

	</Style>
	<Style x:Key="RadialErrorTextStyle" TargetType="TextBlock" BasedOn="{StaticResource HUD.TitleTextStyle}">
		<Setter Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
		<Setter Property="FontWeight" Value="DemiBold"/>
		<Setter Property="TextAlignment" Value="Center"/>
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="TextWrapping" Value="Wrap"/>
		<Setter Property="FontSize" Value="{StaticResource ScaledSmallishFontSize}"/>
		<Setter Property="MaxWidth" Value="540" />
		<Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_textStrokeColor}" />
		<Setter Property="noesis:Text.StrokeThickness" Value="6" />

	</Style>

	<!-- Hint Text Pad-->
	<ControlTemplate x:Key="InspectHintStyle" TargetType="ContentControl">
		<ls:LSNineSliceImage Height="103" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="0,-5,0,0" ImageSource="{StaticResource InspectHintBackground}"  Slices="28,30,28,20" Focusable="False">
			<StackPanel Orientation="Horizontal">
				<ls:LSButton ContentTemplate="{StaticResource ControllerButtonHintImageOnly}" Height="120" Width="120"  Margin="0,-4,0,0"
								 Content="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, ConverterParameter=UIShowInfo, Converter={StaticResource FindInputEventConverter}}" HorizontalAlignment="Left">
					<ls:LSButton.RenderTransform>
						<TransformGroup>
							<ScaleTransform ScaleX="0.9"/>
							<ScaleTransform ScaleY="0.9"/>
						</TransformGroup>
					</ls:LSButton.RenderTransform>
				</ls:LSButton>

				<TextBlock Text="{Binding Source='hafde27eeg294dg41c9g9aa1g5d5f2be9afea', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" TextAlignment="Center" Foreground="{StaticResource TooltipColor.Primary}" FontSize="{StaticResource SmallishFontSize}" Margin="-12,18,40,-3" />
			</StackPanel>
		</ls:LSNineSliceImage>
	</ControlTemplate>

	<Style x:Key="AvailableSlotContainer" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Focusable" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<ContentPresenter/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Rectangle Fill="{Binding Icon}" Width="104" Height="104"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="True">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<ItemsPanelTemplate x:Key="AvailableSlotsListPanelTemplate">
		<ls:LSGrid ActionUpEvent="UIUp" ActionDownEvent="UIDown" ActionRightEvent="UIRight" ActionLeftEvent="UILeft" AutoIndex="True" ContainerData="{Binding }" Columns="5" CellWidth="120" CellHeight="120" DisableScrolling="True" EmptyCellTemplate="{DynamicResource EmptyCellTemplate}"/>
	</ItemsPanelTemplate>

	<ControlTemplate x:Key="SpellGroupListTemplate">
		<ls:LSListBox x:Name="ListBox" ItemsSource="{Binding Actions}" Focusable="False" Template="{StaticResource ScrolllessListBox}" ItemContainerStyle="{StaticResource AvailableSlotContainer}" ItemsPanel="{StaticResource AvailableSlotsListPanelTemplate}">
			<b:Interaction.Triggers>
				<b:PropertyChangedTrigger Binding="{Binding FocusIndex, ElementName=ListBox}">
					<ls:LSPlaySound Sound="UI_Shared_Hover" />
				</b:PropertyChangedTrigger>
			</b:Interaction.Triggers>
		</ls:LSListBox>
	</ControlTemplate>
	<BitmapImage x:Key="ElementDropShadowImg" UriSource="pack://application:,,,/Core;component/Assets/Radials/c_iconbShade.png"/>
	<ControlTemplate x:Key="SlotIconTemplate">
		<Grid>
			<Image x:Name="ElementDropShadow" Width="220" Height="220" Source="{StaticResource ElementDropShadowImg}" RenderTransformOrigin="0.5 0.5" Opacity="0.6" />

			<Image x:Name="iconImg" Width="120" Height="120"  Stretch="Fill" Visibility="Collapsed" >
				<Image.Effect>
					<DropShadowEffect BlurRadius="25" ShadowDepth="0" Opacity="0.8" Color="Black" />
				</Image.Effect>
			</Image>

			<Rectangle x:Name="characterImg" Width="80" Height="120" Fill="{Binding GameObject.Icon}" Visibility="Collapsed">
				<Rectangle.Effect>
					<DropShadowEffect BlurRadius="25" ShadowDepth="0" Opacity="0.8" Color="Black"/>
				</Rectangle.Effect>
			</Rectangle>
		</Grid>
		<ControlTemplate.Triggers>
			<DataTrigger Binding="{Binding SlotType}" Value="Action">
				<Setter TargetName="iconImg" Property="Source">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource IconIdToSourceConverter}" ConverterParameter="{StaticResource FallBackIconPath}">
							<Binding Source="Assets/ControllerUIIcons/skills_png/"/>
							<Binding Path="Spell.IconName"/>
						</MultiBinding>
					</Setter.Value>
				</Setter>
				<Setter TargetName="iconImg" Property="Visibility" Value="Visible"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding SlotType}" Value="Spell">
				<Setter TargetName="iconImg" Property="Source">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource IconIdToSourceConverter}" ConverterParameter="{StaticResource FallBackIconPath}">
							<Binding Source="Assets/ControllerUIIcons/skills_png/"/>
							<Binding Path="Spell.IconName"/>
						</MultiBinding>
					</Setter.Value>
				</Setter>
				<Setter TargetName="iconImg" Property="Visibility" Value="Visible"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding SlotType}" Value="Passive">
				<Setter TargetName="iconImg" Property="Source">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource IconIdToSourceConverter}" ConverterParameter="{StaticResource FallBackIconPath}">
							<Binding Source="Assets/ControllerUIIcons/skills_png/"/>
							<Binding Path="Passive.IconName"/>
						</MultiBinding>
					</Setter.Value>
				</Setter>
				<Setter TargetName="iconImg" Property="Visibility" Value="Visible"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding SlotType}" Value="Item">
				<Setter TargetName="iconImg" Property="Source">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource IconIdToSourceConverter}" ConverterParameter="{StaticResource FallBackIconPath}">
							<Binding Source="Assets/ControllerUIIcons/items_png/"/>
							<Binding Path="GameObject.IconName"/>
						</MultiBinding>
					</Setter.Value>
				</Setter>
				<Setter TargetName="iconImg" Property="Visibility" Value="Visible"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding SlotType}" Value="Character">
				<Setter TargetName="iconImg" Property="Visibility" Value="Collapsed"/>
				<Setter TargetName="characterImg" Property="Visibility" Value="Visible"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding CanUse}" Value="False">
				<Setter TargetName="iconImg" Property="Opacity" Value="0.8"/>
			</DataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsActive}" Value="False"/>
					<Condition Binding="{Binding SlotType}" Value="Passive" />
					<Condition Binding="{Binding Passive.IsMetamagic}" Value="False"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="iconImg" Property="Opacity" Value="0.3"/>
			</MultiDataTrigger>

		</ControlTemplate.Triggers>
	</ControlTemplate>

	<BitmapImage x:Key="CharacterConcentration" UriSource="pack://application:,,,/Core;component/Assets/TargetInfo/concentration_character.png"/>

	<BitmapImage x:Key="SegMetaMagicImg" UriSource="pack://application:,,,/Core;component/Assets/Radials/c_radial_segment_metaMagic.png"/>
	<BitmapImage x:Key="SegNewImg" UriSource="pack://application:,,,/Core;component/Assets/Radials/c_radial_segment_h_new.png"/>
	<BitmapImage x:Key="SegBonusImg" UriSource="pack://application:,,,/Core;component/Assets/Radials/c_radial_segment_bonus.png"/>
	<BitmapImage x:Key="SegBothActionsImg" UriSource="pack://application:,,,/Core;component/Assets/Radials/c_radial_segment_action.png"/>

	<BitmapImage x:Key="PassiveToggleOffImg" UriSource="pack://application:,,,/Core;component/Assets/Radials/c_passiveToggleOff_d.png"/>
	<BitmapImage x:Key="SegDisabled" UriSource="pack://application:,,,/Core;component/Assets/Radials/c_radial_segment_disabled.png"/>

	<ControlTemplate x:Key="PassiveIndicatorTemplate">
		<Image x:Name="img" Source="{StaticResource PassiveToggleOffImg}" Stretch="None" />
		<ControlTemplate.Triggers>
			<DataTrigger Binding="{Binding IsActive}" Value="True">
				<Setter TargetName="img" Property="Source" Value="pack://application:,,,/Core;component/Assets/Radials/c_passiveToggleOn_d.png"/>
			</DataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ls:LSRadialListItem}}}" Value="True"/>
					<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ls:LSRadialListItem}}}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="img" Property="Source" Value="pack://application:,,,/Core;component/Assets/Radials/c_passiveToggleOff_h.png"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding IsActive}" Value="True"/>
					<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ls:LSRadialListItem}}}" Value="True"/>
					<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type ls:LSRadialListItem}}}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="img" Property="Source" Value="pack://application:,,,/Core;component/Assets/Radials/c_passiveToggleOn_h.png"/>
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
		
	</ControlTemplate>

	<Style x:Key="RadialSegmentBG" TargetType="Image">
		<Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/Radials/c_radial_segment_action.png"/>
		<Setter Property="Margin" Value="0,0,0,14"/>
		<Setter Property="Stretch" Value="None"/>
		<Setter Property="Opacity" Value="0.8"/>
		<Setter Property="RenderTransformOrigin" Value="0.5 0.5"/>
		<Setter Property="RenderTransform" >
			<Setter.Value>
					<RotateTransform Angle="-90"/>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<DataTrigger Binding="{Binding Passive.IsMetamagic}" Value="False">
				<Setter Property="Source" Value="pack://application:,,,/Core;component/Assets/Radials/c_radial_segment_passive.png"/>
				<Setter Property="Opacity" Value="1"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding Passive.IsMetamagic}" Value="True">
				<Setter Property="Source" Value="{StaticResource SegMetaMagicImg}"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding GameObject.MainCost}" Value="BonusAction">
				<Setter Property="Source" Value="{StaticResource SegBonusImg}"/>
				<Setter Property="Opacity" Value="0.6"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding Spell.MainCost}" Value="BonusAction">
				<Setter Property="Source" Value="{StaticResource SegBonusImg}"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding Spell.MainCost}" Value="BothActions">
				<Setter Property="Source" Value="{StaticResource SegBothActionsImg}"/>
			</DataTrigger>


		</Style.Triggers>
	</Style>

	<Style x:Key="ControllerMenuItemStyle" TargetType="ls:LSRadialListItem" BasedOn="{StaticResource {x:Type ls:LSRadialListItem}}">
		<Setter Property="Index" Value="{Binding SlotIndex, Mode=OneWay}"/>
		<Setter Property="IsEnabled" Value="{Binding CanUse}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ls:LSRadialListItem">
					<ControlTemplate.Resources>
						<DataTemplate DataType="{x:Type ls:VMHotBarSlot}">
							<Grid x:Name="HotbarSlotRoot" >

								<!-- MetaMagic Slot Visualisations-->
								<Control x:Name="IsModified" Visibility="Collapsed" Width="200" Height="200" >
									<Control.Template>
										<ControlTemplate>
											<Grid ls:LSRadialListItem.RotateType="Rotate"  RenderTransformOrigin="0.5 0.5" Margin="-80,-80,-80,-80">
												<!-- MetaMagic Slot Swirl BG-->
												<Image x:Name="IsModifiedSwirl" Opacity="0.8" Source="{StaticResource RadialBgMetaMagicSwirlImage}" RenderTransformOrigin="0.5 0.5"  Margin="68,68,68,68">
													<Image.RenderTransform>
														<RotateTransform Angle="0"/>
													</Image.RenderTransform>
												</Image>
												<!-- MetaMagic Pop Animation-->
												<ls:AnimatedImage x:Name="IsModifiedPop" Style="{StaticResource MetaMagicAnimationStyle}" Margin="-60,-60,0,0" />
												<b:Interaction.Triggers>
													<b:DataTrigger Binding="{Binding (ls:AnimatedImage.AnimationEnded), ElementName=IsModifiedPop}" Value="True">
														<b:ChangePropertyAction TargetName="IsModifiedPop" PropertyName="Visibility" Value="Hidden"/>
													</b:DataTrigger>

													<b:DataTrigger Binding="{Binding Visibility, ElementName=IsModified}" Value="Visible">
														<b:ChangePropertyAction TargetName="IsModifiedPop" PropertyName="Visibility" Value="Visible"/>
													</b:DataTrigger>
												</b:Interaction.Triggers>
											</Grid>
											<ControlTemplate.Triggers>
												<EventTrigger SourceName="IsModifiedSwirl" RoutedEvent="FrameworkElement.Loaded">
													<BeginStoryboard x:Name="PotentialMetaMagicAnimationSwirl">
														<BeginStoryboard.Storyboard>
															<Storyboard TargetName="IsModifiedSwirl" RepeatBehavior="Forever" FillBehavior="Stop" >
																<DoubleAnimation From="0" To="360" Duration="0:0:2" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"/>
															</Storyboard>
														</BeginStoryboard.Storyboard>
													</BeginStoryboard>
												</EventTrigger>
												<EventTrigger SourceName="IsModifiedSwirl" RoutedEvent="FrameworkElement.Unloaded">
													<StopStoryboard BeginStoryboardName="PotentialMetaMagicAnimationSwirl"/>
												</EventTrigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Control.Template>
								</Control>

								<Control x:Name="icon" Width="240" Height="240" Template="{StaticResource SlotIconTemplate}"  />
								<Grid RenderTransformOrigin="0.5 0.5" ls:LSRadialListItem.RotateType="Rotate">
									<Control x:Name="PassiveIndicator" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,14" Visibility="Collapsed" Template="{StaticResource PassiveIndicatorTemplate}" />
									<Image x:Name="DisabledOverlay" Stretch="None" Margin="0,0,0,14" Source="{StaticResource SegDisabled}" RenderTransformOrigin="0.5 0.5" Visibility="{Binding CanUse, Converter={StaticResource BoolToHiddenConverter}}" Opacity="0.6" >
										<Image.RenderTransform>
											<RotateTransform Angle="270"/>
										</Image.RenderTransform>
									</Image>
									<Image x:Name="SubSelectIndicator" Source="{StaticResource IcoPlusImg}" Width="32" Height="32" Stretch="Fill" RenderTransformOrigin="0.5 0.5" ls:LSRadialListItem.RotateType="InvertRotate" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,28" Visibility="Collapsed"/>

								</Grid>
								<TextBlock x:Name="slotInfo" Text="{Binding GameObject.Count}" Foreground="{StaticResource LS_specialTxtColor}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="50,50,-50,-50" FontSize="{StaticResource ScaledDefaultFontSize}" FontWeight="Bold" noesis:Text.Stroke="#FF000000" noesis:Text.StrokeThickness="5"/>
							</Grid>
							<DataTemplate.Triggers>
								<DataTrigger Binding="{Binding Spell.IsModified}" Value="True">
									<Setter TargetName="IsModified" Property="Visibility" Value="Visible"/>
								</DataTrigger>

								<DataTrigger Binding="{Binding GameObject.IsModified}" Value="True">
									<Setter TargetName="IsModified" Property="Visibility" Value="Visible"/>
								</DataTrigger>

								<DataTrigger Binding="{Binding Spell.IsContainer}" Value="True">
									<Setter TargetName="SubSelectIndicator" Property="Visibility" Value="Visible"/>
								</DataTrigger>

								<DataTrigger Binding="{Binding GameObject.IsContainer}" Value="True">
									<Setter TargetName="SubSelectIndicator" Property="Visibility" Value="Visible"/>
								</DataTrigger>
								
								<DataTrigger Binding="{Binding GameObject.Count}" Value="1">
									<Setter TargetName="slotInfo" Property="Visibility" Value="Hidden"/>
								</DataTrigger>
								<DataTrigger Binding="{Binding CanUse}" Value="False">
									<Setter TargetName="icon" Property="Opacity" Value="0.7"/>
								</DataTrigger>

								<!-- Normal Passive Slot-->
								<DataTrigger Binding="{Binding Passive.IsMetaMagic}" Value="False">
									<Setter TargetName="PassiveIndicator" Property="Visibility" Value="Visible"/>
								</DataTrigger>

								<DataTrigger  Binding="{Binding Spell.IsContainer}" Value="False" >
									<Setter TargetName="slotInfo" Property="Text" Value="{Binding Spell.SpellSlotLevel, Converter={StaticResource DecimalToRomanConverter}}"/>
								</DataTrigger>

								<DataTrigger Binding="{Binding ., Converter={StaticResource TypeConverter}}" Value="ViewModel">
									<Setter TargetName="DisabledOverlay" Property="Visibility" Value="Hidden"/>
								</DataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding Spell.IsModified}" Value="False"/>
										<Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.MetamagicActive,  ElementName=ActionRadials}" Value="True"/>
									</MultiDataTrigger.Conditions>
									<Setter TargetName="DisabledOverlay" Property="Visibility" Value="Visible"/>
									<Setter TargetName="DisabledOverlay" Property="Opacity" Value="0.2"/>
									<Setter TargetName="icon" Property="Opacity" Value="0.7"/>
								</MultiDataTrigger>

								<!-- Active MetaMagic Slot-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsActive}" Value="True"/>
										<Condition Binding="{Binding Passive.IsMetaMagic}" Value="True"/>
									</MultiDataTrigger.Conditions>
									<Setter TargetName="IsModified" Property="Visibility" Value="Visible" />
								</MultiDataTrigger>

								<!-- Spell modifiers -->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding Spell.SpellModifier, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
										<Condition Binding="{Binding DataContext.CurrentSingleHotbarFilter, ElementName=ActionRadials, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Visibility" Value="Visible" TargetName="SubSelectIndicator" />
									<Setter Property="Margin" Value="0,0,0,10" TargetName="SubSelectIndicator" />

									<!-- Ignore CanUse, since this is a fake container -->
									<Setter TargetName="icon" Property="Opacity" Value="1"/>
									<Setter TargetName="DisabledOverlay" Property="Visibility" Value="Collapsed"/>
								</MultiDataTrigger>
							</DataTemplate.Triggers>
						</DataTemplate>
					</ControlTemplate.Resources>
					<Grid ls:LSRadialListItem.RotateType="Rotate" RenderTransformOrigin="0.5 1">
						<Grid x:Name="slotRoot" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,24,0,264" >

							<Image x:Name="SlotBg" Style="{StaticResource RadialSegmentBG}" />
							<Control x:Name="metaMagicSlotBgHolder" Visibility="Collapsed">
								<Control.Template>
									<ControlTemplate>
										<Grid VerticalAlignment="Center" HorizontalAlignment="Center">
											<Image x:Name="metaMagicSlotBg1" Margin="0,0,0,14" Stretch="None" Source="{StaticResource SegMetaMagicImg}" RenderTransformOrigin="0.5 0.5" Opacity="0">
												<Image.RenderTransform>
													<RotateTransform Angle="-90"/>
												</Image.RenderTransform>
											</Image>
										</Grid>
										<ControlTemplate.Triggers>
											<Trigger Property="Visibility" Value="Visible">
												<Trigger.EnterActions>
													<BeginStoryboard x:Name="PotentialMetaMagicAnimation">
														<BeginStoryboard.Storyboard>
															<Storyboard RepeatBehavior="Forever">
																<DoubleAnimationUsingKeyFrames Storyboard.TargetName="metaMagicSlotBg1" Storyboard.TargetProperty="Opacity">
																	<EasingDoubleKeyFrame Value="0" KeyTime="0:0:0"/>
																	<EasingDoubleKeyFrame Value="0.999" KeyTime="0:0:0.6"/>
																	<EasingDoubleKeyFrame Value="0.999" KeyTime="0:0:1"/>
																	<EasingDoubleKeyFrame Value="0" KeyTime="0:0:1.6"/>
																</DoubleAnimationUsingKeyFrames>
															</Storyboard>
														</BeginStoryboard.Storyboard>
													</BeginStoryboard>
												</Trigger.EnterActions>
											</Trigger>
											<EventTrigger RoutedEvent="Unloaded">
												<StopStoryboard BeginStoryboardName="PotentialMetaMagicAnimation"/>
											</EventTrigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Control.Template>
							</Control>

							<Control x:Name="SelectedHolder" Visibility="Collapsed">
								<Control.Template>
									<ControlTemplate>
											<Image x:Name="Selected" Stretch="None" Margin="{StaticResource SlotPosition1}" Source="{StaticResource SegNewImg}" Opacity="0" RenderTransformOrigin="0.5 0.5">
												<Image.RenderTransform>
													<TransformGroup>
														<RotateTransform Angle="-90"/>
														<ScaleTransform ScaleX="1.05"/>
														<ScaleTransform ScaleY="1.05"/>
													</TransformGroup>
												</Image.RenderTransform>
												<Image.Effect>
													<DropShadowEffect BlurRadius="16" ShadowDepth="10" Opacity="1" Color="{StaticResource tint00}"/>
												</Image.Effect>
											</Image>
										<ControlTemplate.Triggers>
											<Trigger Property="IsVisible" Value="True">
												<Setter TargetName="Selected" Property="Opacity" Value="1"/>
												<Setter TargetName="Selected" Property="Margin" Value="{StaticResource SlotPosition2}"/>
												<Trigger.EnterActions>
													<BeginStoryboard x:Name="FadeInSelectedCtrlAnim">
														<Storyboard FillBehavior="Stop" Storyboard.TargetName="Selected">
															<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)">
																<EasingThicknessKeyFrame KeyTime="0" Value="{StaticResource SlotPosition1}"/>
																<EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="{StaticResource SlotPosition2}"/>
															</ThicknessAnimationUsingKeyFrames>
															<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
																<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
																<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
															</DoubleAnimationUsingKeyFrames>
														</Storyboard>
													</BeginStoryboard>
												</Trigger.EnterActions>
												<Trigger.ExitActions>
													<BeginStoryboard x:Name="FadeOutSelectedCtrlAnim">
														<Storyboard FillBehavior="Stop" Storyboard.TargetName="Selected">
															<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" >
																<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
																<EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0"/>
															</DoubleAnimationUsingKeyFrames>
															<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)">
																<EasingThicknessKeyFrame KeyTime="0" Value="{StaticResource SlotPosition2}"/>
																<EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="{StaticResource SlotPosition1}"/>
															</ThicknessAnimationUsingKeyFrames>
														</Storyboard>
													</BeginStoryboard>
												</Trigger.ExitActions>
											</Trigger>
											<EventTrigger RoutedEvent="Unloaded">
												<StopStoryboard BeginStoryboardName="FadeInSelectedCtrlAnim"/>
												<StopStoryboard BeginStoryboardName="FadeOutSelectedCtrlAnim"/>
											</EventTrigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Control.Template>
							</Control>

						   
							
							<Border x:Name="slotRootAnimation" Margin="0,0,0,0" RenderTransformOrigin="1 1" VerticalAlignment="Center" HorizontalAlignment="Center">
								<Grid x:Name="PART_InverseRotation" Margin="0,0,0,0" RenderTransformOrigin="0.5 0.5">
									<!-- Passive Skill Active Indication -->
									<Grid x:Name="passiveIndication" Visibility="Collapsed" Opacity="0">
										<Ellipse x:Name="backgroundCircle" Fill="Black" Width="140" Height="140" RenderTransformOrigin="0.5 0.5" Opacity="0.4"/>
										<Image x:Name="activePassiveSpinner" Source="{StaticResource PassiveActiveSpinner}" Stretch="None" RenderTransformOrigin="0.5 0.5" Opacity="0.8">
											<Image.RenderTransform>
												<RotateTransform Angle="0"/>
											</Image.RenderTransform>
										</Image>
									</Grid>

									<ContentPresenter x:Name="slotContent" ls:LSRadialListItem.RotateType="InvertRotate" RenderTransformOrigin="0.5 0.5"  Content="{TemplateBinding Content}"/>
									<Grid x:Name="ConcentrationHolder" VerticalAlignment="Center" HorizontalAlignment="Center" DataContext="{Binding DataContext.CurrentPlayer.SelectedCharacter,  ElementName=ActionRadials}" Margin="-40,-100,40,100" Visibility="Collapsed" >
										<Ellipse Fill="{Binding Icon}" Width="64" Height="64" ls:LSRadialListItem.RotateType="InvertRotate" RenderTransformOrigin="0.5 0.5"/>
										<Image Source="{StaticResource CharacterConcentration}" Stretch="Uniform" Width="120"/>
									</Grid>
								</Grid>
							</Border>

						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Spell.IsModified}" Value="True">
							<Setter TargetName="metaMagicSlotBgHolder" Property="Visibility" Value="Visible"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding GameObject.IsModified}" Value="True">
							<Setter TargetName="metaMagicSlotBgHolder" Property="Visibility" Value="Visible"/>
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Passive.IsMetamagic}" Value="False"/>
								<Condition Binding="{Binding IsActive}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="SlotBg" Property="Opacity" Value="0.5"/>
						</MultiDataTrigger>


						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Passive.IsMetamagic}" Value="False"/>
								<Condition Binding="{Binding IsActive}" Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="passiveIndication" Property="Visibility" Value="Visible"/>
							<Setter TargetName="passiveIndication" Property="Opacity" Value="1"/>
							<MultiDataTrigger.EnterActions>
								<StopStoryboard BeginStoryboardName="ActivePassiveFadeOut"/>
								<BeginStoryboard x:Name="ActivePassiveAnimation">
									<BeginStoryboard.Storyboard>
										<Storyboard TargetName="activePassiveSpinner" RepeatBehavior="Forever" FillBehavior="Stop" >
											<DoubleAnimation From="0" To="360" Duration="0:0:4" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"/>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" >
												<LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0.3" />
												<LinearDoubleKeyFrame KeyTime="0:0:1.5" Value="0.9" />
												<LinearDoubleKeyFrame KeyTime="0:0:3" Value="0.3" />
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</BeginStoryboard.Storyboard>
								</BeginStoryboard>
								<BeginStoryboard x:Name="ActivePassiveFadeIn">
									<BeginStoryboard.Storyboard>
										<Storyboard FillBehavior="Stop">
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="passiveIndication">
												<LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
												<LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
											</DoubleAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="passiveIndication" Storyboard.TargetProperty="Visibility">
												<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}"/>
												<DiscreteObjectKeyFrame KeyTime="0:0:0.01" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</BeginStoryboard.Storyboard>
								</BeginStoryboard>
							</MultiDataTrigger.EnterActions>
							<MultiDataTrigger.ExitActions>
								<StopStoryboard BeginStoryboardName="ActivePassiveFadeIn"/>
								<BeginStoryboard x:Name="ActivePassiveFadeOut">
									<BeginStoryboard.Storyboard>

										<Storyboard FillBehavior="Stop">
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="passiveIndication">
												<LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
												<LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
											</DoubleAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="passiveIndication" Storyboard.TargetProperty="Visibility">
												<DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
												<DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>

									</BeginStoryboard.Storyboard>
								</BeginStoryboard>
							</MultiDataTrigger.ExitActions>
						</MultiDataTrigger>


						<DataTrigger Binding="{Binding Passive.IsMetamagic}" Value="True">
							<DataTrigger.EnterActions>
								<BeginStoryboard x:Name="ActiveMetaMagicAnimationSwirl">
									<BeginStoryboard.Storyboard>
										<Storyboard RepeatBehavior="Forever" FillBehavior="Stop" >
											<DoubleAnimation From="0" To="360" Duration="0:0:2" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"/>
										</Storyboard>
									</BeginStoryboard.Storyboard>
								</BeginStoryboard>
							</DataTrigger.EnterActions>
							<DataTrigger.ExitActions>
								<StopStoryboard BeginStoryboardName="ActiveMetaMagicAnimationSwirl"/>
							</DataTrigger.ExitActions>
						</DataTrigger>
						<EventTrigger RoutedEvent="Unloaded">
							<StopStoryboard BeginStoryboardName="ActiveMetaMagicAnimationSwirl"/>
						</EventTrigger>


						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Spell.IsModified}" Value="False"/>
								<Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.MetamagicActive, ElementName=ActionRadials}" Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="SlotBg" Property="Opacity" Value="0.4"/>
						</MultiDataTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsEnabled" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="SelectedHolder" Property="Visibility" Value="Visible" />
							<Setter TargetName="SlotBg" Property="Visibility" Value="Visible" />
							<Setter TargetName="SlotBg" Property="Opacity" Value="1" />
							<Setter TargetName="slotRootAnimation" Property="Margin" Value="0,-30,0,0"/>
							<MultiTrigger.EnterActions>
								<BeginStoryboard x:Name="FadeInSelectedAnim">
									<Storyboard FillBehavior="Stop">
										<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)"  Storyboard.TargetName="slotRootAnimation">
											<EasingThicknessKeyFrame KeyTime="0" Value="0,0,0,0"/>
											<EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="0,-30,0,0"/>
										</ThicknessAnimationUsingKeyFrames>
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard x:Name="FadeOutSelectedAnim">
									<Storyboard FillBehavior="Stop">
										<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)"  Storyboard.TargetName="slotRootAnimation">
											<EasingThicknessKeyFrame KeyTime="0" Value="0,-30,0,0"/>
											<EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="0,0,0,0"/>
										</ThicknessAnimationUsingKeyFrames>
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.ExitActions>
						</MultiTrigger>

						<EventTrigger RoutedEvent="FrameworkElement.Unloaded">
							<StopStoryboard BeginStoryboardName="FadeInSelectedAnim"/>
							<StopStoryboard BeginStoryboardName="FadeOutSelectedAnim"/>
						</EventTrigger>
						<DataTrigger Binding="{Binding ., Converter={StaticResource TypeConverter}}" Value="ViewModel">
							<Setter TargetName="SlotBg" Property="Source" Value="{StaticResource SegDisabled}"/>
							<Setter TargetName="SlotBg" Property="Opacity" Value="0.3"/>
							<Setter TargetName="slotContent" Property="Visibility" Value="Hidden"/>
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding SlotType}" Value="Spell"/>
								<Condition Value="True">
									<Condition.Binding>
										<MultiBinding Converter="{StaticResource EqualConverter}">
											<Binding Path="Spell.PrototypeID"/>
											<Binding Path="DataContext.CurrentPlayer.SelectedCharacter.ConcentrationSpell.PrototypeID" ElementName="ActionRadials"/>
										</MultiBinding>
									</Condition.Binding>
								</Condition>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="ConcentrationHolder" Property="Visibility" Value="Visible"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding CanUse}" Value="False">
							<Setter TargetName="SlotBg" Property="Opacity" Value="0.2"/>
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Spell.SpellModifier, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
								<Condition Binding="{Binding DataContext.CurrentSingleHotbarFilter, ElementName=ActionRadials, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True"/>
							</MultiDataTrigger.Conditions>
							<!-- Ignore CanUse, since this is a fake container -->
							<Setter TargetName="SlotBg" Property="Visibility" Value="Visible"/>
						</MultiDataTrigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<!-- Spell modifiers -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Spell.SpellModifier, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
					<Condition Binding="{Binding DataContext.CurrentSingleHotbarFilter, ElementName=ActionRadials, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<!-- Ignore CanUse, since this is a fake container -->
				<Setter Property="IsEnabled" Value="True"/>
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	<Storyboard x:Key="rotateGlow" FillBehavior="Stop">
		<DoubleAnimation From="0" To="0.1" Duration="0:0:1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="metaMagicSwirl"/>
		<DoubleAnimation From="0" To="0.3" Duration="0:0:0.6" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="metaMagicSwirl2"/>
		<DoubleAnimation From="0" To="0.8" Duration="0:0:0.5" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="metaMagicSwirl3"/>
		<DoubleAnimation From="0" To="0.3" Duration="0:0:0.2" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="metaMagicSwirl4"/>


		<DoubleAnimation From="0" To="360" Duration="0:0:2" RepeatBehavior="Forever" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="metaMagicSwirl"/>
		<DoubleAnimation From="0" To="360" Duration="0:0:4" RepeatBehavior="Forever" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="metaMagicSwirl2"/>
		<DoubleAnimation From="360" To="0" Duration="0:0:3" RepeatBehavior="Forever" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="metaMagicSwirl3"/>
		<DoubleAnimation From="0" To="360" Duration="0:0:6" RepeatBehavior="Forever" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="metaMagicSwirl4"/>
	</Storyboard>


	<Style x:Key="SingleBarPageViewStyle" TargetType="{x:Type ls:PageView}">
		<Setter Property="ls:MoveFocus.Focusable" Value="True"/>
		<Setter Property="Margin" Value="-320,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ls:PageView}">
					<Grid x:Name="radialRoot" Width="1560" Height="1560" RenderTransformOrigin="0.5 0.5" >
						<Grid.RenderTransform>
							<ScaleTransform ScaleX="{StaticResource UnfocusedRadialsSizeModifier}" ScaleY="{StaticResource UnfocusedRadialsSizeModifier}"/>
						</Grid.RenderTransform>

						<Ellipse Margin="0,36,0,0" Opacity="0.9" Height="1260" Width="1260" >
							<Ellipse.Fill>
								<RadialGradientBrush>
									<GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="0"/>
									<GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="0.3"/>
									<GradientStop Color="#000000" Offset="0.486"/>
									<GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="1"/>
								</RadialGradientBrush>
							</Ellipse.Fill>
						</Ellipse>

						<ls:Radial ls:ElementCacheHelper.GroupId="ActionRadials"  x:Name="SingleBar" StartIndex="{Binding StartIndex, RelativeSource={RelativeSource Mode=TemplatedParent}}" Visibility="Collapsed" PlayerId="{Binding PlayerId, ElementName=ActionRadials}" FixedAmount="12" ItemsSource="{Binding ItemsSource,RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="False" ItemContainerStyle="{StaticResource ControllerMenuItemStyle}" RenderTransformOrigin="0.5,0.5">
							<ls:Radial.Template>
								<ControlTemplate TargetType="{x:Type ls:Radial}">
									<Grid>
										<Canvas HorizontalAlignment="Center" VerticalAlignment="Center" >
											<Canvas x:Name="PART_ContentHolder" Margin="-128,-564"/>
										</Canvas>
										<Grid x:Name="PART_Rotation" RenderTransformOrigin="0.5 0.5" Margin="8,28,0,0" >
											<Image x:Name="Selector"  VerticalAlignment="Center" HorizontalAlignment="Center" RenderTransformOrigin="0.5 0.5" Source="{StaticResource RadialPointer}" Stretch="None" Margin="6,-264, -6, 264">
												<Image.RenderTransform>
													<RotateTransform Angle="91"/>
												</Image.RenderTransform>
											</Image>
											<Ellipse x:Name="strengthIndicator" Fill="{StaticResource LS_specialTxtColor}" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5 0.5" Opacity="{Binding SelectionStrength, RelativeSource={RelativeSource AncestorType=ls:Radial}, Converter={StaticResource MultiplierConverter}, ConverterParameter='2.5'}" Visibility="Collapsed">
												<Ellipse.RenderTransform>
													<TransformGroup>
														<TranslateTransform X="0" Y="{Binding SelectionStrength, RelativeSource={RelativeSource AncestorType=ls:Radial}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-300'}"/>
													</TransformGroup>
												</Ellipse.RenderTransform>
											</Ellipse>
										</Grid>

									</Grid>
									<ControlTemplate.Triggers>
										<Trigger Property="LocalFocus" Value="{x:Null}">
											<Setter Property="Visibility" Value="Hidden" TargetName="Selector"/>
											<Setter Property="Visibility" Value="Visible" TargetName="strengthIndicator"/>
										</Trigger>
										<Trigger Property="IsEnabled" Value="True">
											<Setter Property="Visibility" Value="Visible" TargetName="PART_Rotation"/>
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</ls:Radial.Template>

							<b:Interaction.Triggers>
								<b:EventTrigger EventName="LocalFocusChanged">
									<b:ChangePropertyAction TargetName="ActionRadials" PropertyName="Tag" Value="{Binding LocalFocus.DataContext, ElementName=SingleBar}"/>
									<b:InvokeCommandAction Command="{Binding DataContext.CreateFocusedTooltipDataCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding LocalFocus.DataContext, ElementName=SingleBar}"/>
									<b:InvokeCommandAction Command="{Binding DataContext.HighlightResourcesCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding LocalFocus.DataContext, ElementName=SingleBar}"/>
									<ls:LSPlaySound Sound="UI_HUD_Controller_RadialMenu_SlotHover" />
								</b:EventTrigger>
							</b:Interaction.Triggers>
						</ls:Radial>
						<b:Interaction.Triggers>
							<b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="False">
								<b:InvokeCommandAction Command="{Binding DataContext.CreateFocusedTooltipDataCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
								<b:ChangePropertyAction PropertyName="LocalFocus" TargetName="SingleBar" Value="{x:Null}"/>
							</b:DataTrigger>
							<b:DataTrigger Binding="{Binding IsVisible, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
								<b:Interaction.Behaviors>
									<b:ConditionBehavior>
										<b:ConditionalExpression>
											<b:ComparisonCondition LeftOperand="{Binding IsListFocus, RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="Equal" RightOperand="True"/>
											<b:ComparisonCondition LeftOperand="{Binding (ls:MoveFocus.IsFocused) , RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="Equal" RightOperand="False"/>
										</b:ConditionalExpression>
									</b:ConditionBehavior>
								</b:Interaction.Behaviors>
								<ls:SetMoveFocusAction TargetName="ActionRadials" FocusElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
							</b:DataTrigger>
							<b:DataTrigger Binding="{Binding IsListFocus, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
								<b:Interaction.Behaviors>
									<b:ConditionBehavior>
										<b:ConditionalExpression>
											<b:ComparisonCondition LeftOperand="{Binding (ls:MoveFocus.IsFocused) , RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="Equal" RightOperand="False"/>
										</b:ConditionalExpression>
									</b:ConditionBehavior>
								</b:Interaction.Behaviors>
								<ls:SetMoveFocusAction TargetName="ActionRadials" FocusElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" />
							</b:DataTrigger>
							<b:EventTrigger EventName="VisibilityChanged">
								<b:Interaction.Behaviors>
									<b:ConditionBehavior>
										<b:ConditionalExpression>
											<b:ComparisonCondition LeftOperand="{Binding IsListFocus, RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="Equal" RightOperand="True"/>
											<b:ComparisonCondition LeftOperand="{Binding (ls:MoveFocus.IsFocused) , RelativeSource={RelativeSource Mode=TemplatedParent}}" Operator="Equal" RightOperand="False"/>
										</b:ConditionalExpression>
									</b:ConditionBehavior>
								</b:Interaction.Behaviors>
								<ls:SetMoveFocusAction TargetName="ActionRadials" FocusElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
							</b:EventTrigger>

							<b:EventTrigger EventName="Unloaded">
								<ls:SetMoveFocusAction TargetName="ActionRadials" FocusElement="{x:Null}"/>
							</b:EventTrigger>


							<b:TimerTrigger EventName="Loaded" TotalTicks="1" MillisecondsPerTick="{Binding Source={StaticResource RadialAppearDelay}}">
								<b:ChangePropertyAction TargetName="SingleBar" PropertyName="Visibility" Value="Visible"/>
							</b:TimerTrigger>
						</b:Interaction.Triggers>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="ls:MoveFocus.IsFocused" Value="True">
							<Setter TargetName="radialRoot" Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="1" ScaleY="1"/>
								</Setter.Value>
							</Setter>
							<Setter TargetName="SingleBar" Property="IsEnabled" Value="True"/>
						</Trigger>

						<Trigger Property="ls:MoveFocus.IsFocused" Value="False">
							<Setter TargetName="SingleBar" Property="LocalFocus" Value="{x:Null}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="BarPageViewStyle" TargetType="{x:Type ls:PageView}">
		<Setter Property="ls:MoveFocus.Focusable" Value="True"/>
		<Setter Property="Margin" Value="-320,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate x:Name="ControlTemplateRoot" TargetType="{x:Type ls:PageView}">
					<Border Width="1560" Height="1560">
						<Grid x:Name="radialRoot" Visibility="Collapsed" RenderTransformOrigin="0.5 0.5" Margin="0,0">
							<Grid.RenderTransform>
								<ScaleTransform ScaleX="{StaticResource UnfocusedRadialsSizeModifier}" ScaleY="{StaticResource UnfocusedRadialsSizeModifier}"/>
							</Grid.RenderTransform>

							<Ellipse Margin="0,36,0,0" Opacity="0.9" Height="1260" Width="1260" >
									<Ellipse.Fill>
									<RadialGradientBrush>
										<GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="0"/>
										<GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="0.3"/>
										<GradientStop Color="#000000" Offset="0.486"/>
										<GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="1"/>
									</RadialGradientBrush>
								</Ellipse.Fill>
							</Ellipse>
							<ls:Radial x:Name="HotBarRadial" ls:ElementCacheHelper.GroupId="ActionRadials" OverrideIndex="False" StartIndex="{Binding StartIndex, RelativeSource={RelativeSource Mode=TemplatedParent}}" PlayerId="{Binding PlayerId, ElementName=ActionRadials}" FixedAmount="12" ItemsSource="{TemplateBinding ItemsSource}" ItemContainerStyle="{StaticResource ControllerMenuItemStyle}" IsEnabled="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Mode=TemplatedParent}}"  Visibility="Collapsed" >
								<ls:Radial.Template>
									<ControlTemplate TargetType="{x:Type ls:Radial}">
										<Grid>
											<Canvas HorizontalAlignment="Center" VerticalAlignment="Center" >
												<Canvas x:Name="PART_ContentHolder" Margin="-128,-564"/>
											</Canvas>
											<Grid x:Name="PART_Rotation" RenderTransformOrigin="0.5 0.5" Margin="8,28,0,0" >
												<Image x:Name="Selector"  VerticalAlignment="Center" HorizontalAlignment="Center" RenderTransformOrigin="0.5 0.5" Source="{StaticResource RadialPointer}" Stretch="None" Margin="6,-264, -6, 264">
													<Image.RenderTransform>
														<RotateTransform Angle="91"/>
													</Image.RenderTransform>
												</Image>
												<Ellipse x:Name="strengthIndicator" Fill="{StaticResource LS_specialTxtColor}" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5 0.5" Opacity="{Binding SelectionStrength, RelativeSource={RelativeSource AncestorType=ls:Radial}, Converter={StaticResource MultiplierConverter}, ConverterParameter='2.5'}" Visibility="Collapsed">
													<Ellipse.RenderTransform>
														<TransformGroup>
															<TranslateTransform X="0" Y="{Binding SelectionStrength, RelativeSource={RelativeSource AncestorType=ls:Radial}, Converter={StaticResource MultiplierConverter}, ConverterParameter='-300'}"/>
														</TransformGroup>
													</Ellipse.RenderTransform>
												</Ellipse>
											</Grid>

										</Grid>
										<ControlTemplate.Triggers>
											<Trigger Property="LocalFocus" Value="{x:Null}">
												<Setter Property="Visibility" Value="Hidden" TargetName="Selector"/>
												<Setter Property="Visibility" Value="Visible" TargetName="strengthIndicator"/>
											</Trigger>
											<Trigger Property="IsEnabled" Value="True">
												<Setter Property="Visibility" Value="Visible" TargetName="PART_Rotation"/>
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</ls:Radial.Template>

								<b:Interaction.Triggers>
									<b:EventTrigger EventName="LocalFocusChanged">
										<b:ChangePropertyAction TargetName="ActionRadials" PropertyName="Tag" Value="{Binding LocalFocus.DataContext, ElementName=HotBarRadial}"/>
										<b:InvokeCommandAction Command="{Binding DataContext.CreateFocusedTooltipDataCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding LocalFocus.DataContext,  ElementName=HotBarRadial}"/>
										<b:InvokeCommandAction Command="{Binding DataContext.HighlightResourcesCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding LocalFocus.DataContext, ElementName=HotBarRadial}"/>
										<ls:LSPlaySound Sound="UI_HUD_Controller_RadialMenu_SlotHover" />
									</b:EventTrigger>
									<b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
										<b:ChangePropertyAction TargetName="HotBarList" PropertyName="Tag" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
									</b:DataTrigger>

									<b:TimerTrigger EventName="Loaded" TotalTicks="1" MillisecondsPerTick="{Binding Source={StaticResource RadialAppearDelay}}">
										<b:ChangePropertyAction TargetName="HotBarRadial" PropertyName="Visibility" Value="Visible"/>
									</b:TimerTrigger>

								</b:Interaction.Triggers>
							</ls:Radial>
							<ls:LSInputBinding x:Name="swapSlotBinding" Command="{Binding DataContext.UseSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
											   IsEnabled="{Binding DataContext.InSwapSlotState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
											   EatInput="{Binding DataContext.InSwapSlotState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
											   BoundEvent="UIAccept">
								<ls:LSInputBinding.CommandParameter>
									<MultiBinding Converter="{StaticResource PassThroughConverter}">
										<Binding Path="DataContext" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
										<Binding Path="LocalFocus.Index" ElementName="HotBarRadial"/>
										<Binding Path="LocalFocus.DataContext" ElementName="HotBarRadial"/>
									</MultiBinding>
								</ls:LSInputBinding.CommandParameter>
							</ls:LSInputBinding>
							<b:Interaction.Triggers>
								<!-- On creating or removing a radial, update focus to force a check on left/right available radials -->
								<b:EventTrigger EventName="Loaded">
									<ls:SetMoveFocusAction TargetName="ActionRadials" InvalidateFocus="True"/>
								</b:EventTrigger>
								<b:EventTrigger EventName="Unloaded">
									<ls:SetMoveFocusAction TargetName="ActionRadials" InvalidateFocus="True"/>
								</b:EventTrigger>

								<b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="False">
									<b:InvokeCommandAction Command="{Binding DataContext.CreateFocusedTooltipDataCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
									<b:ChangePropertyAction PropertyName="LocalFocus" TargetName="HotBarRadial" Value="{x:Null}"/>
								</b:DataTrigger>
								<b:EventTrigger EventName="Loaded">
									<b:Interaction.Behaviors>
										<b:ConditionBehavior>
											<b:ConditionalExpression>
												<b:ComparisonCondition LeftOperand="{Binding ActiveItem, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource NullToBoolFalseConverter}}" Operator="Equal" RightOperand="{StaticResource TrueValue}"/>
											</b:ConditionalExpression>
										</b:ConditionBehavior>
									</b:Interaction.Behaviors>
									<ls:SetMoveFocusAction TargetName="ActionRadials" FocusElement="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
								</b:EventTrigger>
							</b:Interaction.Triggers>

						</Grid>
						<Border.ContextMenu>
							<ls:ContextMenu>
								<ls:ContextMenuItem Header="{Binding Source='he3f4fe5cga90ag4438g8f5bg79c19473e30a', Converter={StaticResource TranslatedStringConverter}}" IsTitle="True" IsEnabled="False"/>
								<ls:ContextMenuItem x:Name="AssignSlotItem" IsIndented="True" Header="{Binding Source='h40295ee1g2029g4282ga924g61751691cb3d', Converter={StaticResource TranslatedStringConverter}}" Command="{Binding DataContext.RequestAssignSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
									<ls:ContextMenuItem.CommandParameter>
										<MultiBinding Converter="{StaticResource PassThroughConverter}">
											<Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType={x:Type ls:PageView}}"/>
											<Binding Path="LocalFocus.Index" ElementName="HotBarRadial"/>
										</MultiBinding>
									</ls:ContextMenuItem.CommandParameter>
								</ls:ContextMenuItem>
								<ls:ContextMenuItem x:Name="SwapSlotItem" IsIndented="True" Header="{Binding Source='h18e19f89g10e2g4546gadfdg6657ad7f56b8', Converter={StaticResource TranslatedStringConverter}}" Command="{Binding DataContext.SwapSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Tag, ElementName=ActionRadials}"/>
								<ls:ContextMenuItem x:Name="ClearSlotItem" IsIndented="True" Header="{Binding Source='haba68145g1fc9g4380g9ff0gf498f5ee383d', Converter={StaticResource TranslatedStringConverter}}" Command="{Binding DataContext.ClearSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Tag, ElementName=ActionRadials}"/>
								<ls:ContextMenuItem Header="{Binding Source='h921d24b9g4a44g441agbbbag176eef91b713', Converter={StaticResource TranslatedStringConverter}}" IsTitle="True" IsEnabled="False"/>
								<ls:ContextMenuItem x:Name="AddRadialItem" IsIndented="True" Header="{Binding Source='hfab2af0fg32feg4c0ag9ac8g40e08eb46ad3', Converter={StaticResource TranslatedStringConverter}}" Command="{Binding DataContext.AddRadialCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}" IsEnabled="{Binding NumberOfBars,Converter={StaticResource LessThanConverter}, ConverterParameter='12'}"/>
								<ls:ContextMenuItem x:Name="RemoveRadialItem" IsIndented="True" Header="{Binding Source='hd79704d4g27bag4aa7gac16g9fdf4554e53f', Converter={StaticResource TranslatedStringConverter}}" Command="{Binding DataContext.RemoveRadialCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
									<ls:ContextMenuItem.CommandParameter>
										<MultiBinding Converter="{StaticResource PassThroughConverter}">
											<Binding Path="."/>
											<Binding Path="FocusedElement.PageIndex" ElementName="ActionRadials"/>
										</MultiBinding>
									</ls:ContextMenuItem.CommandParameter>
								</ls:ContextMenuItem>
							</ls:ContextMenu>
						</Border.ContextMenu>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="InViewPort" Value="True">
							<Setter Property="Visibility" Value="Visible" TargetName="radialRoot"/>
						</Trigger>

						<DataTrigger Binding="{Binding HotBarType}" Value="CommonHotBar">
							<Setter TargetName="AddRadialItem" Property="IsEnabled" Value="False"/>
							<Setter TargetName="RemoveRadialItem" Property="IsEnabled" Value="False"/>
						</DataTrigger>

						<DataTrigger Binding="{Binding NumberOfBars}" Value="1">
							<Setter TargetName="RemoveRadialItem" Property="IsEnabled" Value="False"/>
						</DataTrigger>

						<DataTrigger Binding="{Binding LocalFocus, ElementName=HotBarRadial, Converter={StaticResource NullToBoolFalseConverter}}" Value="False">
							<Setter TargetName="swapSlotBinding" Property="IsEnabled" Value="False"/>
							<Setter TargetName="AssignSlotItem" Property="IsEnabled" Value="False"/>
							<Setter TargetName="SwapSlotItem" Property="IsEnabled" Value="False"/>
							<Setter TargetName="ClearSlotItem" Property="IsEnabled" Value="False"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding LocalFocus, ElementName=HotBarRadial, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
							<Setter Property="CommandParameter" TargetName="swapSlotBinding">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource PassThroughConverter}">
										<Binding Path="DataContext" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
										<Binding Path="LocalFocus.Index" ElementName="HotBarRadial"/>
										<Binding Path="LocalFocus.DataContext" ElementName="HotBarRadial"/>
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</DataTrigger>
						<Trigger Property="ls:MoveFocus.IsFocused" Value="True">
							<Setter TargetName="radialRoot" Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="1" ScaleY="1"/>
								</Setter.Value>
							</Setter>
							<Setter TargetName="HotBarRadial" Property="IsEnabled" Value="True"/>
						</Trigger>

						<Trigger Property="ls:MoveFocus.IsFocused" Value="False">
							<Setter TargetName="HotBarRadial" Property="LocalFocus" Value="{x:Null}"/>

						</Trigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, ElementName=HotBarRadial}" Value="False" />
								<Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Left" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="radialRoot" Property="Visibility" Value="Collapsed" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, ElementName=HotBarRadial}" Value="False" />
								<Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Right" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="radialRoot" Property="Visibility" Value="Collapsed" />
						</MultiDataTrigger>

						<DataTrigger Binding="{Binding IsEnabled, ElementName=HotBarRadial}" Value="True" >
							<Setter TargetName="radialRoot" Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="1" ScaleY="1"/>
								</Setter.Value>
							</Setter>
						</DataTrigger>
						
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, ElementName=HotBarRadial}" Value="True" />
								<Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Left" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="radialRoot" Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, ElementName=HotBarRadial}" Value="True" />
								<Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Right" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="radialRoot" Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="InventoryCellTemplate" >
		<ls:LSEntityObject Context="Inventory" EntityRef="{Binding EntityHandle}" DataContext="{Binding Object}">
			<ContentPresenter Content="{Binding .}" ContentTemplate="{StaticResource Template.GameObject}" />
			<Control IsHitTestVisible="True" Template="{StaticResource InventoryInUseSlotIndicator}"/>
		</ls:LSEntityObject>
	</ControlTemplate>

	<!--Inventory Grid-->
	<Style TargetType="ListBox" x:Key="InventoryGrid" BasedOn="{StaticResource {x:Type ListBox}}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
		<Setter Property="ItemsPanel" >
			<Setter.Value>
				<ItemsPanelTemplate>
					<ls:LSGrid x:Name="InvGrid" ContainerData="{Binding }" Columns="{DynamicResource invCols}" Rows="{DynamicResource invRows}" ActionUpEvent="UIUp" ActionDownEvent="UIDown" ActionRightEvent="UIRight" ActionLeftEvent="UILeft">
						<ls:LSGrid.Style>
							<Style TargetType="ls:LSGrid" BasedOn="{StaticResource InventoryGridCellStyle}">
								<Setter Property="Margin" Value="0,4,0,0" />
								<Style.Triggers>
									<DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
										<Setter Property="Margin" Value="0,0,0,0" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</ls:LSGrid.Style>
						<b:Interaction.Behaviors>
							<ls:DropOnInventoryGridBehavior DropCommand="{Binding DataContext.DropOnInventorySlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
							<ls:DragGameObjectGridBehavior/>
						</b:Interaction.Behaviors>
						<b:Interaction.Triggers>
							<b:EventTrigger EventName="WidgetClosing">
								<b:InvokeCommandAction Command="{Binding DataContext.ClearInventoryNewFlags, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding }"/>
							</b:EventTrigger>
						</b:Interaction.Triggers>
					</ls:LSGrid>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="ListBoxItem">
					<Setter Property="Template" Value="{StaticResource InventoryCellTemplate}" />
					<Setter Property="BorderBrush" Value="Transparent" />
					<Setter Property="Background" Value="Transparent" />
					<Setter Property="Width" Value="{DynamicResource InvSlotSize}" />
					<Setter Property="Height" Value="{DynamicResource InvSlotSize}" />
					<Setter Property="Padding" Value="0" />
					<Setter Property="BorderThickness" Value="0" />
					<Setter Property="VerticalContentAlignment" Value="Top"/>
					<Style.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="BorderBrush" Value="Transparent" />
							<Setter Property="Background" Value="Transparent" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="Transparent" />
							<Setter Property="Background" Value="Transparent" />
						</Trigger>
					</Style.Triggers>
				</Style>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SlotAssignHolderStyle" TargetType="Control">
		<Setter Property="Template" Value="{x:Null}"/>
		<Style.Triggers>
			<DataTrigger Binding="{Binding AssigningSlot}" Value="True">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate>
							<Grid x:Name="SlotAssignTemplate">
								<Grid x:Name="bgFade" Background="{StaticResource LS_PopUpBackgroundColor}"/>

								<ls:LSNineSliceImage x:Name="assignSlotPanel" Style="{StaticResource DefaultOverlay9Slice}" VerticalAlignment="Center" HorizontalAlignment="Center" Padding="32,32,64,32">
									<StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
										<Grid >
											<ls:LSListBox x:Name="AssignList" Background="Black" KeyboardNavigation.DirectionalNavigation="Contained" ActionNextEvent="UIDown" ActionPrevEvent="UIUp" SelectedIndex="0"
									LocalFocusSelector="{Binding ElementName=SelectorAssign,Mode=OneWay}" Height="842">
												<ls:LSListBox.ToolTip>
													<ls:LSTooltip x:Name="assignSlotTooltip" ToolTipService.Placement="Right" ToolTipService.HorizontalOffset="40" ToolTipService.VerticalOffset="-40"  />
												</ls:LSListBox.ToolTip>
												<ls:LSListBox.Template>
													<ControlTemplate TargetType="{x:Type ListBox}">
														<ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Visible" Template="{StaticResource ScrollViewerTemplate}" >
															<ScrollViewer.Resources>
																<GridLength x:Key="Top">0</GridLength>
																<GridLength x:Key="Bottom">0</GridLength>
															</ScrollViewer.Resources>
															<ItemsPresenter/>
														</ScrollViewer>
													</ControlTemplate>
												</ls:LSListBox.Template>

												<ls:LSListBox.ItemsPanel>
													<ItemsPanelTemplate>
														<ls:LSVirtualizingStackPanel/>
													</ItemsPanelTemplate>
												</ls:LSListBox.ItemsPanel>

												<!-- Spells & actions list -->
												<ls:LSListBoxItem HorizontalAlignment="Center">
													<ls:LSListBox x:Name="SpellGroupList" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.SpellsAndActions}" ActionNextEvent="UIDown" ActionPrevEvent="UIUp" KeyboardNavigation.DirectionalNavigation="Continue" MaxWidth="760" Template="{StaticResource ScrolllessListBox}">
														<ls:LSListBox.ItemContainerStyle>
															<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
																<Setter Property="Background" Value="Transparent"/>
																<Setter Property="Template" Value="{StaticResource SpellGroupListTemplate}" />
																<Style.Triggers>
																	<Trigger Property="IsSelected" Value="True">
																		<Setter Property="Background" Value="Transparent"/>
																		<Setter Property="BorderBrush" Value="Transparent"/>
																	</Trigger>
																	<DataTrigger Binding="{Binding Actions.Count}" Value="0">
																		<Setter Property="Visibility" Value="Collapsed"/>
																	</DataTrigger>
																</Style.Triggers>
															</Style>
														</ls:LSListBox.ItemContainerStyle>
													</ls:LSListBox>
												</ls:LSListBoxItem>

												<!-- Passives list -->
												<ls:LSListBoxItem HorizontalAlignment="Center" x:Name="PassivesHolder">
													<b:Interaction.Behaviors>
														<ls:CollectionFilterBehavior x:Name="PassivesFilter" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.Stats.Passives}" Predicate="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.TogglablePassivePredicate}"/>
													</b:Interaction.Behaviors>
													<ls:LSListBox x:Name="PassivesListbox" ItemsSource="{Binding (b:Interaction.Behaviors)[0].FilteredItems, ElementName=PassivesHolder}" KeyboardNavigation.DirectionalNavigation="Continue" Template="{StaticResource ScrolllessListBox}"
													Visibility="{Binding (b:Interaction.Behaviors)[0].FilteredItems.Count, ElementName=PassivesHolder, Converter={StaticResource CountToVisibilityConverter}}" ItemContainerStyle="{StaticResource AvailableSlotContainer}" ItemsPanel="{StaticResource AvailableSlotsListPanelTemplate}"/>
												</ls:LSListBoxItem>

												<!-- MetaMagic list -->
												<ls:LSListBoxItem HorizontalAlignment="Center" x:Name="MetaMagicHolder">
													<b:Interaction.Behaviors>
														<ls:CollectionFilterBehavior x:Name="MetaMagicFilter" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.Stats.Passives}" Predicate="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.TogglableMetaMagicPassivePredicate}"/>
													</b:Interaction.Behaviors>
													<ls:LSListBox x:Name="MetamagicListbox" ItemsSource="{Binding (b:Interaction.Behaviors)[0].FilteredItems, ElementName=MetaMagicHolder}" KeyboardNavigation.DirectionalNavigation="Continue" Template="{StaticResource ScrolllessListBox}"
													Visibility="{Binding (b:Interaction.Behaviors)[0].FilteredItems.Count, ElementName=MetaMagicHolder, Converter={StaticResource CountToVisibilityConverter}}" ItemContainerStyle="{StaticResource AvailableSlotContainer}" ItemsPanel="{StaticResource AvailableSlotsListPanelTemplate}"/>
												</ls:LSListBoxItem>

												<!-- Inventory list -->
												<ls:LSListBoxItem HorizontalAlignment="Center" x:Name="InventoryListHolder">

													<ls:LSListBox x:Name="InventoryListbox" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.Inventory.Slots}" Style="{StaticResource InventoryGrid}" KeyboardNavigation.DirectionalNavigation="Continue"  Template="{StaticResource ScrolllessListBox}" ItemsPanel="{StaticResource AvailableSlotsListPanelTemplate}"/>
												</ls:LSListBoxItem>

												<b:Interaction.Triggers>
													<b:EventTrigger EventName="LocalFocusChanged">
														<!-- Make sure the Content is set on the LSToolTip before ShowTooltipOnUIElement is called -->
														<b:ChangePropertyAction TargetName="assignSlotTooltip" PropertyName="Content" Value="{Binding LocalFocus.DataContext, ElementName=AssignList}" />
														<b:InvokeCommandAction IsEnabled="{Binding LocalFocus, ElementName=AssignList,Converter={StaticResource NullToBoolFalseConverter}}" Command="{Binding ShowTooltipOnUIElementCommand}" CommandParameter="{Binding ., ElementName=AssignList}"/>
														<b:InvokeCommandAction IsEnabled="{Binding LocalFocus, ElementName=AssignList,Converter={StaticResource NullToBoolTrueConverter}}" Command="{Binding ShowTooltipOnUIElementCommand}" CommandParameter="{x:Null}"/>
													</b:EventTrigger>

													<b:EventTrigger EventName="LocalFocusChanged">
														<b:Interaction.Behaviors>
															<b:ConditionBehavior>
																<b:ConditionalExpression>
																	<b:ComparisonCondition LeftOperand="{Binding LocalFocus.DataContext.Object, ElementName=AssignList}" Operator="NotEqual" RightOperand="{x:Null}"/>
																</b:ConditionalExpression>
															</b:ConditionBehavior>
														</b:Interaction.Behaviors>
														<b:ChangePropertyAction TargetName="assignSlotTooltip" PropertyName="Content" Value="{Binding LocalFocus.DataContext.Object, ElementName=AssignList}" />
													</b:EventTrigger>

													<b:PropertyChangedTrigger Binding="{Binding FocusIndex, ElementName=PassivesListbox}">
														<ls:LSPlaySound Sound="UI_Shared_Hover" />
													</b:PropertyChangedTrigger>
													<b:PropertyChangedTrigger Binding="{Binding FocusIndex, ElementName=MetamagicListbox}">
														<ls:LSPlaySound Sound="UI_Shared_Hover" />
													</b:PropertyChangedTrigger>
													<b:PropertyChangedTrigger Binding="{Binding FocusIndex, ElementName=InventoryListbox}">
														<ls:LSPlaySound Sound="UI_Shared_Hover" />
													</b:PropertyChangedTrigger>
												</b:Interaction.Triggers>
											</ls:LSListBox>

											<Control x:Name="SelectorAssign" IsHitTestVisible="False" VerticalAlignment="Top" HorizontalAlignment="Left" Template="{StaticResource SelectorTemplate}" Visibility="{Binding Visibility, ElementName=AssignList}"/>
										</Grid>

										<!-- Hints  -->
										<ls:LSWrapPanel x:Name="BtnHintStackPanel" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Bottom" HorizontalContentAlignment="Center" Width="600" Margin="-20,0,20,0">

											<!-- Assign Slot-->
											<ls:LSButton x:Name="AssignButton"
										   VerticalAlignment="Center"
										   Margin="0,0,20,0"
										   ContentTemplate="{StaticResource ControllerButtonHint}"
										   Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
										   BoundEvent="UIAccept"
										   Tag="{Binding Source='h40295ee1g2029g4282ga924g61751691cb3d',Converter={StaticResource TranslatedStringConverter}}"
										   Command="{Binding AssignSlotCommand}"
										   CommandParameter="{Binding LocalFocus.DataContext, ElementName=AssignList}"/>

											<!-- Cancel button -->
											<ls:LSButton VerticalAlignment="Center"
										   ContentTemplate="{StaticResource ControllerButtonHint}"
										   Content ="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
										   BoundEvent="UICancel"
										   Tag="{Binding Source='h43f0dd5cg543cg46f5gaa87g4f14f4803cd1',Converter={StaticResource TranslatedStringConverter}}"
										   Command="{Binding AssignSlotCommand}"
										   CommandParameter=""/>
										</ls:LSWrapPanel>
									</StackPanel>
								</ls:LSNineSliceImage>

								<Grid.Triggers>

									<EventTrigger RoutedEvent="FrameworkElement.Loaded">
										<BeginStoryboard x:Name="SlotAssignStartAnim">
											<Storyboard FillBehavior="Stop">
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="bgFade" >
													<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
													<EasingDoubleKeyFrame KeyTime="0:0:0.50" Value="1">
														<EasingDoubleKeyFrame.EasingFunction>
															<CubicEase EasingMode="EaseOut"/>
														</EasingDoubleKeyFrame.EasingFunction>
													</EasingDoubleKeyFrame>
												</DoubleAnimationUsingKeyFrames>

												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"  Storyboard.TargetName="BtnHintStackPanel">
													<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
													<EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1">
														<EasingDoubleKeyFrame.EasingFunction>
															<CubicEase EasingMode="EaseOut"/>
														</EasingDoubleKeyFrame.EasingFunction>
													</EasingDoubleKeyFrame>
												</DoubleAnimationUsingKeyFrames>
											</Storyboard>
										</BeginStoryboard>
									</EventTrigger>
									<EventTrigger RoutedEvent="FrameworkElement.Unloaded">
										<StopStoryboard BeginStoryboardName="SlotAssignStartAnim" />
									</EventTrigger>
								</Grid.Triggers>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<ControlTemplate x:Key="RadialHotBarListItemContainer" TargetType="{x:Type ListBoxItem}">
		<ls:PagedList x:Name="PagedList" ItemsSource="{Binding SlotList}" GroupAmount="{Binding CellColumns}" IndexProperty="SlotIndex" MinPageAmount="1" PageStyle="{StaticResource BarPageViewStyle}" GlobalActiveItem="{Binding DataContext.CurrentPlayer.UIData.ActiveSlot, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" HasParentList="True"/>

		<ControlTemplate.Triggers>
			<DataTrigger Binding="{Binding HotBarType}" Value="ClassHotBar">
				<Setter TargetName="PagedList" Property="MinPageAmount" Value="{Binding NumberOfBars, Mode=TwoWay}"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding HotBarType}" Value="ItemHotBar">
				<Setter TargetName="PagedList" Property="MinPageAmount" Value="{Binding NumberOfBars, Mode=TwoWay}"/>
			</DataTrigger>
		</ControlTemplate.Triggers>

	</ControlTemplate>

	<ControlTemplate x:Key="MetaMagicDisplayTemplate" TargetType="Control">
		<Grid>
			<Image x:Name="metaMagicSwirl2" Stretch="Fill" Margin="0,4,0,0" VerticalAlignment="Center" HorizontalAlignment="Center" Width="1100" Height="1100" Opacity="0.8" Source="{StaticResource RadialBgMetaMagicSwirlImage}" RenderTransformOrigin="0.5 0.5">
				<Image.RenderTransform>
					<RotateTransform Angle="0"/>
				</Image.RenderTransform>

			</Image>
			<Image x:Name="metaMagicSwirl3" Stretch="Fill" Margin="0,4,0,0" VerticalAlignment="Center" HorizontalAlignment="Center" Width="900" Height="900" Opacity="0.5" Source="{StaticResource RadialBgMetaMagicSwirlImage}" RenderTransformOrigin="0.5 0.5">
				<Image.RenderTransform>
					<RotateTransform Angle="180"/>
				</Image.RenderTransform>

			</Image>
			<Image x:Name="metaMagicSwirl4" Stretch="Fill" Margin="0,4,0,0" VerticalAlignment="Center" HorizontalAlignment="Center" Width="700" Height="700" Opacity="0.3" Source="{StaticResource RadialBgMetaMagicSwirlImage}" RenderTransformOrigin="0.5 0.5">
				<Image.RenderTransform>
					<RotateTransform Angle="90"/>
				</Image.RenderTransform>
			</Image>
			<Image x:Name="metaMagicSwirl" Stretch="Fill" Margin="0,4,0,0" VerticalAlignment="Center" HorizontalAlignment="Center" Width="1400" Height="1400" Opacity="0.1" Source="{StaticResource RadialBgMetaMagicSwirlImage}" RenderTransformOrigin="0.5 0.5">
				<Image.RenderTransform>
					<RotateTransform Angle="0"/>
				</Image.RenderTransform>
			</Image>
		</Grid>
		<ControlTemplate.Triggers>
			<EventTrigger SourceName="metaMagicSwirl2" RoutedEvent="FrameworkElement.Loaded">
				<BeginStoryboard x:Name="swirlyAnimation" Storyboard="{StaticResource rotateGlow}" />
			</EventTrigger>
			<EventTrigger RoutedEvent="Unloaded">
				<StopStoryboard BeginStoryboardName="swirlyAnimation" />
			</EventTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate  x:Key="ActionRadialWidgetTemplate">
		<Grid x:Name="fadeInRadials" >
			<b:Interaction.Triggers>
				<b:DataTrigger Binding="{Binding Layout}" Value="Common">
					<b:Interaction.Behaviors>
						<b:ConditionBehavior>
							<b:ConditionalExpression>
								<b:ComparisonCondition LeftOperand="{Binding Data.IsFullScreenSharedInitiativeEnabled}" Operator="Equal" RightOperand="False"/>
								<b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Operator="Equal" RightOperand="False"/>
								<b:ComparisonCondition LeftOperand="{Binding Data.LocalPlayers.Count}" Operator="Equal" RightOperand="2"/>
							</b:ConditionalExpression>
						</b:ConditionBehavior>
					</b:Interaction.Behaviors>
					<b:InvokeCommandAction Command="{Binding CustomEvent}" CommandParameter="CloseRadials"/>
				</b:DataTrigger>
				<b:DataTrigger Binding="{Binding Layout}" Value="Common">
					<b:Interaction.Behaviors>
						<b:ConditionBehavior>
							<b:ConditionalExpression>
								<b:ComparisonCondition LeftOperand="{Binding Data.IsFullScreenSharedInitiativeEnabled}" Operator="Equal" RightOperand="True"/>
								<b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.SelectedCharacter.IsOwnerActiveInSplitscreenFullscreenTurn}" Operator="Equal" RightOperand="False"/>
								<b:ComparisonCondition LeftOperand="{Binding Data.LocalPlayers.Count}" Operator="Equal" RightOperand="2"/>
							</b:ConditionalExpression>
						</b:ConditionBehavior>
					</b:Interaction.Behaviors>
					<b:InvokeCommandAction Command="{Binding CustomEvent}" CommandParameter="CloseRadials"/>
				</b:DataTrigger>

			</b:Interaction.Triggers>
			

			<Control x:Name="MetaMagicDisplay" Template="{StaticResource MetaMagicDisplayTemplate }" Visibility="Collapsed"/>
			<Control x:Name="singleBarHolder" Visibility="Collapsed">
				<Control.Template>
					<ControlTemplate TargetType="Control">
						<Grid ClipToBounds="True">
							<Image x:Name="singleBarBG" Stretch="None" Margin="0,36,0,0" VerticalAlignment="Center" HorizontalAlignment="Center" Opacity="0.5"  Source="{StaticResource RadialBg}" RenderTransformOrigin="0.5 0.5">
								<Image.RenderTransform>
									<ScaleTransform ScaleX="0.85" ScaleY="0.85"/>
								</Image.RenderTransform>
							</Image>
						  
							<ls:PagedList ItemsSource="{Binding SingleHotBar.SlotList}" GroupAmount="12" PageStyle="{StaticResource SingleBarPageViewStyle}" VerticalAlignment="Center" MinPageAmount="1"/>
						</Grid>
						<ControlTemplate.Triggers>
							<DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.IsShapeShifted}" Value="True">
								<Setter TargetName="singleBarBG" Property="Visibility" Value="Collapsed"/>
							</DataTrigger>
							<DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterType}" Value="Summon">
								<Setter TargetName="singleBarBG" Property="Visibility" Value="Collapsed"/>
							</DataTrigger>
							<DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterType}" Value="Follower">
								<Setter TargetName="singleBarBG" Property="Visibility" Value="Collapsed"/>
							</DataTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Control.Template>
			</Control>

			<Grid x:Name="MainHotbarListHolder">
				<Grid.OpacityMask>
					<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
						<LinearGradientBrush.GradientStops>
							<GradientStop Offset="0" Color="Transparent"/>
							<GradientStop Offset="0.1" Color="Black"/>
							<GradientStop Offset="0.9" Color="Black"/>
							<GradientStop Offset="1" Color="Transparent"/>
						</LinearGradientBrush.GradientStops>
					</LinearGradientBrush>
				</Grid.OpacityMask>
				<Image x:Name="nameBackground" Width="560" Height="280" Stretch="Fill" Source="{StaticResource IconShadeBG}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,280,0,0" Opacity="0.4" />
				<!-- Swap Slots -->
				<Grid VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="{Binding InSwapSlotState, Converter={StaticResource BoolToVisibleConverter}}">
					<Ellipse Fill="{StaticResource LS_PopUpBackgroundColor}" Width="600" Height="600"/>
					<Control x:Name="icon" Template="{StaticResource SlotIconTemplate}" DataContext="{Binding CurrentActiveSlot}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0, -50, 0, 50">
						<Control.RenderTransform>
							<ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
						</Control.RenderTransform>
					</Control>
				</Grid>
				<!-- Action Radials -->
				<ListBox x:Name="HotBarList" VerticalAlignment="Center" Height="1560" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.ControllerHotBars}" IsEnabled="{Binding AssigningSlot, Converter={StaticResource InvertBoolConverter}}" ScrollViewer.PanningMode="HorizontalOnly" ScrollViewer.VerticalScrollBarVisibility="Disabled" VirtualizingPanel.VirtualizationMode="Recycling" VirtualizingPanel.ScrollUnit="Pixel"
						 ScrollViewer.HorizontalScrollBarVisibility="Visible" ScrollViewer.CanContentScroll="False">
					<ListBox.ItemContainerStyle>
						<Style TargetType="{x:Type ListBoxItem}">
							<Setter Property="Template" Value="{StaticResource RadialHotBarListItemContainer}" >
							</Setter>
							<Style.Triggers>
								<DataTrigger Binding="{Binding HotBarType}" Value="PassivesHotBar">
									<Setter Property="Template" Value="{x:Null}"/>
								</DataTrigger>
								<DataTrigger Binding="{Binding HotBarType}" Value="FixedSideBar">
									<Setter Property="Template" Value="{x:Null}"/>
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</ListBox.ItemContainerStyle>
					<ListBox.ItemsPanel>
						<ItemsPanelTemplate>
							<StackPanel Orientation="Horizontal"/>
						</ItemsPanelTemplate>
					</ListBox.ItemsPanel>
					<ListBox.Template>
						<ControlTemplate TargetType="{x:Type ListBox}">
							<Grid >
								<ls:LSScrollViewer x:Name="HotbarListScrollviewer" Focusable="False" ScrollToElement="{Binding FocusedElement, ElementName=ActionRadials}" >
									<ItemsPresenter x:Name="ItemsPresenterThing"  Margin="3860,0,3860,0"/>
									<b:Interaction.Triggers>
										<b:EventTrigger EventName="TargetPositionChanged">
											<b:ChangePropertyAction PropertyName="HorizontalScrollOffset" TargetName="HotbarListScrollviewer" Value="{Binding Path=TargetPosition, ElementName=HotbarListScrollviewer}"/>
										</b:EventTrigger>
									</b:Interaction.Triggers>
								</ls:LSScrollViewer>
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="*"/>
									</Grid.ColumnDefinitions>
									<Grid x:Name="leftHintHolder" Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,420,680">
										<ContentPresenter x:Name="leftHint" Tag=" " ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UITabPrev, Converter={StaticResource FindInputEventConverter}}"/>
										<Image Stretch="None" Source="{StaticResource CarouselArrow}" Opacity="1" Margin="0,320,-120,0" >
											<Image.RenderTransform>
												<RotateTransform Angle="180"/>
											</Image.RenderTransform>
										</Image>
									</Grid>
									<Grid x:Name="rightHintHolder" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="420,0,0,680" >
										<ContentPresenter x:Name="rightHint" Tag=" "  ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UITabNext, Converter={StaticResource FindInputEventConverter}}"/>
										<Image Stretch="None" Source="{StaticResource CarouselArrow}" Opacity="1" Margin="0,180,0,0"/>
									</Grid>
								</Grid>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="ls:MoveFocus.IsKeyboardFocusWithin" Value="False">
									<Setter TargetName="leftHint" Property="Visibility" Value="Collapsed"/>
									<Setter TargetName="rightHint" Property="Visibility" Value="Collapsed"/>
								</Trigger>
								<DataTrigger Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Common">
									<Setter TargetName="leftHintHolder" Property="Margin" Value="0,0,520,680"/>
									<Setter TargetName="rightHintHolder" Property="Margin" Value="520,0,0,680"/>
								</DataTrigger>
								<DataTrigger Binding="{Binding LeftFocusElement, ElementName=ActionRadials, Converter={StaticResource NullToBoolTrueConverter}}" Value="True">
									<Setter TargetName="leftHintHolder" Property="Opacity" Value="0.6"/>
								</DataTrigger>
								<DataTrigger Binding="{Binding RightFocusElement, ElementName=ActionRadials, Converter={StaticResource NullToBoolTrueConverter}}" Value="True">
									<Setter TargetName="rightHintHolder" Property="Opacity" Value="0.6"/>
								</DataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</ListBox.Template>
				</ListBox>
			</Grid>
			<StackPanel x:Name="ActionButton" DataContext="{Binding Path=Tag, ElementName=ActionRadials}" Visibility="Collapsed" Orientation="Vertical" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,820">


				<Control x:Name="FakeTooltipForPinnedTooltip" DataContext="{x:Null}">
					<Control.Template>
						<ControlTemplate>
							<Border x:Name="tooltipHolder" ToolTipService.IsEnabled="{Binding ., Converter={StaticResource NullToBoolFalseConverter}}" ToolTipService.Placement="Top" Tag="{Binding .}">
								<Border.ToolTip>
									<ls:LSTooltip x:Name="hbTooltip" Opacity="0" Content="{Binding ElementName=tooltipHolder,Path=Tag}" ls:TooltipExtender.Context="Hotbar"/>
								</Border.ToolTip>
								<b:Interaction.Triggers>
									<b:EventTrigger EventName="DataContextChanged">
										<b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElementCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding ., RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
									</b:EventTrigger>
								</b:Interaction.Triggers>
							</Border>
							<ControlTemplate.Triggers>
								<DataTrigger Binding="{Binding SlotType}" Value="Item">
									<Setter TargetName="tooltipHolder" Property="Tag" Value="{Binding GameObject}"/>
								</DataTrigger>
								<DataTrigger Binding="{Binding SlotType}" Value="Passive">
									<Setter TargetName="tooltipHolder" Property="Tag" Value="{Binding Passive}"/>
								</DataTrigger>
								<DataTrigger Binding="{Binding SlotType}" Value="Spell">
									<Setter TargetName="tooltipHolder" Property="Tag" Value="{Binding Spell}"/>
								</DataTrigger>
								<DataTrigger Binding="{Binding SlotType}" Value="Action">
									<Setter TargetName="tooltipHolder" Property="Tag" Value="{Binding Spell}"/>
								</DataTrigger>
								<DataTrigger Binding="{Binding ., Converter={StaticResource TypeConverter}}" Value="ls.VMCharacterAction">
									<Setter TargetName="tooltipHolder" Property="Tag" Value="{Binding .}"/>
								</DataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Control.Template>
					<b:Interaction.Triggers>
						<b:EventTrigger SourceName="ActionButton" EventName="DataContextChanged">
							<b:ChangePropertyAction TargetName="FakeTooltipForPinnedTooltip" Value="{x:Null}" PropertyName="DataContext" />
						</b:EventTrigger>
						<b:TimerTrigger SourceName="ActionButton" EventName="DataContextChanged" TotalTicks="1" MillisecondsPerTick="60">
							<b:ChangePropertyAction TargetName="FakeTooltipForPinnedTooltip" Value="{Binding ElementName=ActionButton,Path=DataContext}" PropertyName="DataContext" />
						</b:TimerTrigger>
					</b:Interaction.Triggers>
				</Control>
				<ls:LSButton x:Name="ActionButtonIcon" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}" Style="{StaticResource ControllerButtonIconOnly}" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}" EatInput="False" VerticalAlignment="Center" Visibility="Hidden" SoundID="UI_HUD_Controller_RadialMenu_SlotSelect"/>
				<!-- Not Available Messages -->
				<TextBlock x:Name="RadialActionErrorMessage" Text="{Binding Source='hc4df7df6gdc7dg48fdgac0fg0a299ddf74f6', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource RadialErrorTextStyle}" Visibility="Collapsed" Foreground="{StaticResource LS_accent75TxtColor}" />

				<!-- Error Messages -->
				<StackPanel x:Name="AdditionalErrors" VerticalAlignment="Top" HorizontalAlignment="Center">
					<b:Interaction.Behaviors>
						<ls:CapabilityListSelectorBehavior x:Name="CapabilityListSelectorBehavior" CapabilitiesCollection="{Binding DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.ModifiedCapabilities, ElementName=ActionRadials}"/>
					</b:Interaction.Behaviors>

					<!-- WARNINGS -->
					<Border x:Name="SpellWarnings" Visibility="Collapsed" HorizontalAlignment="Center">
						<ItemsControl x:Name="Warnings" ItemsSource="{Binding DataContext.FocusedSlotTooltipData.UnavailableReasons, ElementName=ActionRadials}" Visibility="{Binding ItemsSource.Count, Converter={StaticResource CountToVisibilityConverter}, RelativeSource={RelativeSource Mode=Self}}" Margin="0,12,0,12">
							<ItemsControl.ItemTemplate>
								<DataTemplate>
									<DockPanel HorizontalAlignment="Center" Visibility="{Binding Line, Converter={StaticResource StringToVisibilityConverter}}" Margin="0,-4,0,0">
										<Image Source="{StaticResource IconWarning}" DockPanel.Dock="Top" Stretch="None" Style="{StaticResource leftAlignedTooltipWarningIcon}">
											<Image.Effect>
												<DropShadowEffect Color="Black" ShadowDepth="0" BlurRadius="12" />
											</Image.Effect>
										</Image>
										<TextBlock ls:TextBlockFormatter.SourceText="{Binding Line}" Style="{StaticResource RadialErrorTextStyle}"/>
									</DockPanel>
								</DataTemplate>
							</ItemsControl.ItemTemplate>
						</ItemsControl>
					</Border>

					<ContentPresenter x:Name="CapabilitiesErrors" Content="{Binding ElementName=CapabilityListSelectorBehavior , Path=FirstVisibleElement}">
						<ContentPresenter.ContentTemplate>
							<DataTemplate DataType="{x:Type ls:VMCapabilityModifier}">
								<DockPanel x:Name="CapabilityErrorHolder" HorizontalAlignment="Center" Margin="0,-4,0,0" Visibility="Collapsed">
									<Image Source="{StaticResource IconWarning}" DockPanel.Dock="Top" Stretch="None" Style="{StaticResource leftAlignedTooltipWarningIcon}">
										<Image.Effect>
											<DropShadowEffect Color="Black" ShadowDepth="0" BlurRadius="12" />
										</Image.Effect>
									</Image>
									<TextBlock x:Name="CapabilityError" Style="{StaticResource RadialErrorTextStyle}" >
									<Run x:Name="Message"/><Run x:Name="Cause"/>
									</TextBlock>
								</DockPanel>
								<DataTemplate.Triggers>
									<DataTrigger Binding="{Binding Cause, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
										<Setter TargetName="Cause" Property="Text">
											<Setter.Value>
												<MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
													<Binding Source="hb19f530dgfeb2g4d13g8d64ga8216f364f67"/>
													<Binding Path="Cause"/>
												</MultiBinding>
											</Setter.Value>
										</Setter>
									</DataTrigger>

									<DataTrigger  Binding="{Binding Type}" Value="LostControl">
										<Setter TargetName="CapabilityErrorHolder" Property="Visibility" Value="Visible" />
									</DataTrigger>

									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding Type}" Value="LostControl"/>
											<Condition Binding="{Binding Value}" Value="Incapacitated"/>
										</MultiDataTrigger.Conditions>
										<Setter TargetName="Message" Property="Text" Value="{Binding Source='h651a24ddgb955g43b5g8a7bgff54a162cab1', Converter={StaticResource TranslatedStringConverter}}"/>
									</MultiDataTrigger>
									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding Type}" Value="LostControl"/>
											<Condition Binding="{Binding Value}" Value="KnockedDown"/>
										</MultiDataTrigger.Conditions>
										<Setter TargetName="Message" Property="Text" Value="{Binding Source='hfba6780fgc9e9g4271g8b98g46884bf56443', Converter={StaticResource TranslatedStringConverter}}"/>
									</MultiDataTrigger>
									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding Type}" Value="LostControl"/>
											<Condition Binding="{Binding Value}" Value="Downed"/>
										</MultiDataTrigger.Conditions>
										<Setter TargetName="Message" Property="Text" Value="{Binding Source='h371b7c23g65beg45f4g8680gbcd03907e57f', Converter={StaticResource TranslatedStringConverter}}"/>
									</MultiDataTrigger>
									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding Type}" Value="LostControl"/>
											<Condition Binding="{Binding Value}" Value="Dying"/>
										</MultiDataTrigger.Conditions>
										<Setter TargetName="Message" Property="Text" Value="{Binding Source='h2e807311g8c4bg4141g85f3gcc88ee095888', Converter={StaticResource TranslatedStringConverter}}"/>
									</MultiDataTrigger>
									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding Type}" Value="LostControl"/>
											<Condition Binding="{Binding Value}" Value="StoryFrozen"/>
										</MultiDataTrigger.Conditions>
										<Setter TargetName="Message" Property="Text" Value="{Binding Source='hbd5803f1g480cg4eb4g820fg242124c08ea9', Converter={StaticResource TranslatedStringConverter}}"/>
									</MultiDataTrigger>
									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding Type}" Value="LostControl"/>
											<Condition Binding="{Binding Value}" Value="LostControl"/>
										</MultiDataTrigger.Conditions>
										<Setter TargetName="Cause" Property="Text" Value="{Binding Cause}"/>
									</MultiDataTrigger>

								</DataTemplate.Triggers>
							</DataTemplate>
						</ContentPresenter.ContentTemplate>
					</ContentPresenter>

				</StackPanel>


				<Control x:Name="MetamagicLabel" Margin="-10,0,8,0" Template="{StaticResource MetamagicLabelTemplate}" FontSize="{StaticResource ScaledMediumFontSize}" VerticalAlignment="Center" FontStyle="Italic" FontWeight="DemiBold" />
				<TextBlock x:Name="ActionButtonDescription" Width="480" TextAlignment="Center" HorizontalAlignment="Center" FontSize="{StaticResource ScaledIntermediateFontSize}" TextWrapping="Wrap" Foreground="{StaticResource LS_tint100}" Style="{StaticResource HUD.TitleTextStyle}" FontWeight="DemiBold" />
				<TextBlock x:Name="UpcastInfo" Text="{Binding Spell.SlotLevel, Converter={StaticResource DecimalToRomanConverter}}" TextAlignment="Center" VerticalAlignment="Center" Foreground="{StaticResource LS_accent100TxtColor}" FontSize="{StaticResource ScaledIntermediateFontSize}" FontWeight="DemiBold" Style="{StaticResource HUD.DefaultTextStyle}" />

			</StackPanel>

			<!-- Radial type -->
			<TextBlock x:Name="RadialTypeText" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,-140,0,140" Style="{StaticResource HUD.DefaultTextStyle}"/>

			<ContentPresenter x:Name="SwapSlotHint" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='h18e19f89g10e2g4546gadfdg6657ad7f56b8', Converter={StaticResource TranslatedStringConverter}}" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0, 100, 0, -100"/>

			<!-- Name, short description and action details -->
			<ls:LSNineSliceImage x:Name="ActionDetailsPanel" Margin="0,1340,0,0" Style="{StaticResource ActionDetailsBG9Slice}" DataContext="{Binding Path=Tag, ElementName=ActionRadials}" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center" Padding="320,12,320,12" >

				<Grid x:Name="ActionDescriptionSection" VerticalAlignment="Center" MinHeight="240" Margin="0,22,0,0" >
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<!-- Inspect Prompt -->
					<ContentControl x:Name="uiHintContainer" HorizontalAlignment="Center" Template="{StaticResource InspectHintStyle}"  Margin="-1000,-110,0,0" />

					<!-- Action Details -->
					<TextBlock Grid.Row="0" x:Name="ActionButtonTooltipDescription" TextAlignment="Center" HorizontalAlignment="Center" FontSize="{StaticResource ScaledIntermediateFontSize}" Foreground="{StaticResource LS_tint100}" Style="{StaticResource HUD.TitleTextStyle}" FontWeight="DemiBold" Margin="0,-12,0,0"/>
					<Control x:Name="ActionDetails" Grid.Row="1"  Margin="0,8,0,8" Template="{StaticResource ActionDetailsTemplate}" HorizontalAlignment="Center" VerticalAlignment="Top" Visibility="Collapsed"/>

					<!-- Action Descriptions -->
					<Grid Grid.Row="2" VerticalAlignment="Stretch" Margin="0,-8,0,22">

						<TextBlock x:Name="ItemShortDescription" Style="{StaticResource HUD.DefaultTextStyle}" MaxWidth="1400" FontSize="{StaticResource ScaledSmallishFontSize}" FontWeight="DemiBold" Foreground="{StaticResource LS_baseTxtColor}" TextAlignment="Center" TextWrapping="Wrap" LineStackingStrategy="BlockLineHeight" LineHeight="56" VerticalAlignment="Center">
								<b:Interaction.Behaviors>
									<ls:CtxTransStringRunGeneratorBehavior Source="{Binding GameObject.ShortDescription}" ParamRunStyle="{StaticResource TooltipUnitParamRun}" />
								</b:Interaction.Behaviors>
						</TextBlock>

						<TextBlock x:Name="ItemDescription" Style="{StaticResource HUD.DefaultTextStyle}" MaxWidth="1400" FontSize="{StaticResource ScaledSmallishFontSize}" FontWeight="DemiBold" Foreground="{StaticResource LS_baseTxtColor}" TextAlignment="Center" TextWrapping="Wrap" LineStackingStrategy="BlockLineHeight" LineHeight="56" VerticalAlignment="Center" Visibility="{Binding GameObject.ShortDescription, Converter={StaticResource NullToVisibleConverter}, FallbackValue='Collapsed'}" ls:TextBlockFormatter.SourceText="{Binding GameObject.Description}" />

						<TextBlock x:Name="ActionDescriptionSpell" Style="{StaticResource HUD.DefaultTextStyle}" MaxWidth="1400" FontSize="{StaticResource ScaledSmallishFontSize}" FontWeight="DemiBold" Foreground="{StaticResource LS_baseTxtColor}" TextAlignment="Center" TextWrapping="Wrap" LineStackingStrategy="BlockLineHeight" VerticalAlignment="Center" LineHeight="56" Visibility="{Binding Spell, Converter={StaticResource NullToCollapsedConverter}}">
								<b:Interaction.Behaviors>
									<ls:CtxTransStringRunGeneratorBehavior Source="{Binding Spell.ShortDescription}" ParamRunStyle="{StaticResource TooltipUnitParamRun}" />
								</b:Interaction.Behaviors>
						</TextBlock>
						<TextBlock x:Name="PassiveDescriptionSpell" Style="{StaticResource HUD.DefaultTextStyle}" MaxWidth="1400" FontSize="{StaticResource ScaledSmallishFontSize}" FontWeight="DemiBold" Foreground="{StaticResource LS_baseTxtColor}" TextAlignment="Center" VerticalAlignment="Center" TextWrapping="Wrap" LineStackingStrategy="BlockLineHeight" LineHeight="56" Visibility="{Binding Passive, Converter={StaticResource NullToCollapsedConverter}}">
								<b:Interaction.Behaviors>
									<ls:CtxTransStringRunGeneratorBehavior Source="{Binding Passive.Description}" ParamRunStyle="{StaticResource TooltipUnitParamRun}" />
								</b:Interaction.Behaviors>
						</TextBlock>
					</Grid>

					<!-- Concentration -->
					<StackPanel Grid.Row="3" Orientation="Horizontal" Visibility="{Binding Spell.IsConcentrationSpell, Converter={StaticResource BoolToVisibleConverter}, FallbackValue=Collapsed}" HorizontalAlignment="Center" Margin="0,-12,0,16">
						<Image Source="{StaticResource IconConcentration}" Margin="0,0,8,0"/>
						<TextBlock Text="{Binding Source='hdda88715g0f4fg49c1ga22dga11b80dcf8b9', Converter={StaticResource TranslatedStringConverter}}"  Style="{StaticResource HUD.DefaultTextStyle}" FontSize="{StaticResource ScaledSmallishFontSize}" FontWeight="DemiBold" Foreground="{StaticResource LS_accent75TxtColor}"/>
					</StackPanel>

					<!-- Shortcuts -->
					<TextBlock x:Name="ShortcutText" Grid.Row="4" Style="{StaticResource HUD.DefaultTextStyle}" FontSize="{StaticResource ScaledSmallishFontSize}" FontWeight="DemiBold" Foreground="{StaticResource LS_accent75TxtColor}" Visibility="Collapsed" Margin="0,-38,0,16" VerticalAlignment="Center"  HorizontalAlignment="Center">
							<b:Interaction.Behaviors>
								<ls:CtxTransStringRunGeneratorBehavior x:Name="ShortcutTextBehavior" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" NamedParamContentStyle="{StaticResource ParamContentControllerStyle}">
									<ls:CtxTransStringRunGeneratorBehavior.LocaSource>
										<MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
											<Binding Source="hcddbfb84g910cg44a1g8695ge48859c74f58"/>
											<Binding Path="Text" ElementName="ActionButtonTooltipDescription"/> 
											<Binding Path="(ls:AttachedProperties.InheritedTag)" ElementName="ShortcutText"/>
										</MultiBinding>
									</ls:CtxTransStringRunGeneratorBehavior.LocaSource>
								</ls:CtxTransStringRunGeneratorBehavior>
							</b:Interaction.Behaviors>
					</TextBlock>

					<!-- Action Cost -->
					<Border x:Name="ActionCostSection" HorizontalAlignment="Stretch" Grid.Row="5" VerticalAlignment="Bottom" Visibility="Collapsed" Margin="0,-4,0,0">
						<Border.Background>
							<LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
								<GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="0"/>
								<GradientStop Color="#9C000000" Offset="0.5"/>
								<GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="1"/>
							</LinearGradientBrush>
						</Border.Background>

						<StackPanel Orientation="Horizontal" HorizontalAlignment="Center" >
							<TextBlock x:Name="CostLabel" FontSize="{DynamicResource ScaledSmallishFontSize}" Margin="0,0,12,0" VerticalAlignment="Center" FontWeight="DemiBold" FontStyle="Italic" Foreground="{StaticResource LS_accent75TxtColor}" Style="{StaticResource HUD.DefaultTextStyle}">
							<Run Text="{Binding Source='h8189a676g99feg436fgb9e6g7500c6690fb6', Converter={StaticResource TranslatedStringConverter}}" />
							<Run Text="{Binding Source='hb897c56egaa6fg460bg8676g8ebfa0340954', Converter={StaticResource TranslatedStringConverter}}" />
							</TextBlock>

							<!-- MOD START - DynamicResource -->
							<ItemsControl x:Name="ActionCostSummary" ItemsSource="{Binding DataContext.FocusedSlotTooltipData.CostSummary, ElementName=ActionRadials}" AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Mode=Self}}" HorizontalAlignment="Center" ItemTemplate="{DynamicResource ActionCostSummaryList}"
							  Visibility="{Binding InSwapSlotState, Converter={StaticResource BoolToCollapsedConverter}}">
							<!-- MOD END -->
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<StackPanel Orientation="Horizontal" />
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>

							</ItemsControl>
						</StackPanel>
					</Border>
				</Grid>
			</ls:LSNineSliceImage>

			<!-- Select item in the world prompt-->
			<ls:LSButton x:Name="ToWorldButton" Margin="0,1300,0,0" Tag="{Binding Source='hf6830bd6g4b21g4a7aga963g30da537e64b7', Converter={StaticResource TranslatedStringConverter}}"  ContentTemplate="{StaticResource ControllerButtonHint}" BoundEvent="UIDelete" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIDelete, Converter={StaticResource FindInputEventConverter}}" HorizontalAlignment="Center" Visibility="Collapsed" Command="{Binding CustomEvent}" CommandParameter="CloseRadials"/>

			<!-- Slot assigning pop-up-->
			<Control x:Name="SlotAssignHolder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Style="{StaticResource SlotAssignHolderStyle}" />

			<!-- Weapon Set Change & Dual Wield Notification -->

			<ls:LSNineSliceImage x:Name="ControlNotifcations" Opacity="0" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,486" Panel.ZIndex="100" Style="{StaticResource NotificationBG9Slice}" >
				<TextBlock x:Name="NotifcationText" Text="{Binding Source='hfaac6c41gc244g45d5g952agb45eb21ee282',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource ScaledDefaultFontSize}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="36,20" />

				<b:Interaction.Triggers>
					<b:PropertyChangedTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.HasRangedSetActive}">
						<b:Interaction.Behaviors>
							<b:ConditionBehavior>
								<b:ConditionalExpression>
									<b:ComparisonCondition LeftOperand="{Binding ElementName=ToggleWeaponSet, Path=IsPressed}" Operator="Equal" RightOperand="True"/>
									<b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.HasRangedSetActive}" Operator="Equal" RightOperand="True"/>
								</b:ConditionalExpression>
							</b:ConditionBehavior>
						</b:Interaction.Behaviors>
						<b:ChangePropertyAction TargetName="NotifcationText" PropertyName="Text" Value="{Binding Source='h6e99c201gc607g4da9gba50gb83f93d8a6e6',Converter={StaticResource TranslatedStringConverter}}" />
						<b:ControlStoryboardAction Storyboard="{StaticResource FadeInNotification}"/>
					</b:PropertyChangedTrigger>

					<b:PropertyChangedTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.HasRangedSetActive}">
						<b:Interaction.Behaviors>
							<b:ConditionBehavior>
								<b:ConditionalExpression>
									<b:ComparisonCondition LeftOperand="{Binding ElementName=ToggleWeaponSet, Path=IsPressed}" Operator="Equal" RightOperand="True"/>
									<b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.HasMeleeSetActive}" Operator="Equal" RightOperand="True"/>
								</b:ConditionalExpression>
							</b:ConditionBehavior>
						</b:Interaction.Behaviors>
						<b:ChangePropertyAction TargetName="NotifcationText" PropertyName="Text" Value="{Binding Source='hfaac6c41gc244g45d5g952agb45eb21ee282',Converter={StaticResource TranslatedStringConverter}}" />
						<b:ControlStoryboardAction Storyboard="{StaticResource FadeInNotification}"/>
					</b:PropertyChangedTrigger>

					<b:PropertyChangedTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.IsDualWieldingToggledOn}">
						<b:Interaction.Behaviors>
							<b:ConditionBehavior>
								<b:ConditionalExpression>
									<b:ComparisonCondition LeftOperand="{Binding ElementName=ToggleDualWield, Path=IsPressed}" Operator="Equal" RightOperand="True"/>
									<b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.IsDualWieldingToggledOn}" Operator="Equal" RightOperand="True"/>
								</b:ConditionalExpression>
							</b:ConditionBehavior>
						</b:Interaction.Behaviors>
						<b:ChangePropertyAction TargetName="NotifcationText" PropertyName="Text" Value="{Binding Source='hee8cf049gc819g4cd4g8b3ag7a0acc1f2f1b',Converter={StaticResource TranslatedStringConverter}}" />
						<b:ControlStoryboardAction Storyboard="{StaticResource FadeInNotification}"/>
					</b:PropertyChangedTrigger>

					<b:PropertyChangedTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.IsDualWieldingToggledOn}">
						<b:Interaction.Behaviors>
							<b:ConditionBehavior>
								<b:ConditionalExpression>
									<b:ComparisonCondition LeftOperand="{Binding ElementName=ToggleDualWield, Path=IsPressed}" Operator="Equal" RightOperand="True"/>
									<b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.IsDualWieldingToggledOn}" Operator="Equal" RightOperand="False"/>
								</b:ConditionalExpression>
							</b:ConditionBehavior>
						</b:Interaction.Behaviors>
						<b:ChangePropertyAction TargetName="NotifcationText" PropertyName="Text" Value="{Binding Source='h69107c78gd9efg4fd2ga137g427cc0280604',Converter={StaticResource TranslatedStringConverter}}" />
						<b:ControlStoryboardAction Storyboard="{StaticResource FadeInNotification}"/>
					</b:PropertyChangedTrigger>

					<b:PropertyChangedTrigger Binding="{Binding AssigningSlot}">
						<ls:SetMoveFocusAction TargetName="ActionRadials" DeferFocusAction="True" FocusElement="{Binding ElementName=HotBarList, Path=Tag}"/>
					</b:PropertyChangedTrigger>
				</b:Interaction.Triggers>
			</ls:LSNineSliceImage>

			<!-- button hints -->
			<ls:AlignableWrapPanel x:Name="ButtonHintsContainer" Style="{StaticResource ButtonHint.Container.CenterWrap}" HorizontalAlignment="Right" HorizontalContentAlignment="Right" IsEnabled="{Binding AssigningSlot, Converter={StaticResource InvertBoolConverter}}" Width="1000" FlowDirection="RightToLeft" Margin="26,0,26,56">

				<ls:LSButton x:Name="SelectButtonVisual"
								 Tag="{Binding Source='h04f38549g65b8g4b72g834eg87ee8863fdc5', Converter={StaticResource TranslatedStringConverter}}"
								 ContentTemplate="{StaticResource ControllerButtonHint}"
								 Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" HorizontalContentAlignment="Left" HorizontalAlignment="Left" Visibility="Collapsed" Width="1000"/>

				<ls:LSButton x:Name="ShowContextMenu" Command="{Binding ShowContextMenu}" CommandParameter="{Binding FocusedElement, ElementName=ActionRadials}" BoundEvent="ContextMenu" Tag="{Binding Source='h921d24b9g4a44g441agbbbag176eef91b713', Converter={StaticResource TranslatedStringConverter}}"
								 ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=ContextMenu, Converter={StaticResource FindInputEventConverter}}" HorizontalContentAlignment="Left" HorizontalAlignment="Left" Width="1000"/>

				<ls:LSButton x:Name="CancelConcentrationButton" Style="{StaticResource ControllerHoldButtonStyle}" Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIEndTurn'}"
								 Command="{Binding ReleaseConcentrationCommand}"
								 CommandParameter="{Binding CurrentPlayer.SelectedCharacter}"
								 Tag="{Binding Source='h1018e7a5gdb9ag4b51g9898gc30c5b0ab518', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" EatInput="False" Visibility="{Binding CurrentPlayer.SelectedCharacter.ConcentrationSpell, Converter={StaticResource NullToCollapsedConverter}}" HorizontalContentAlignment="Left" HorizontalAlignment="Left" Margin="10,0,20,0" Width="1000"/>

				<!-- Toggle Melee Weapon Set -->
				<ls:LSButton x:Name="ToggleWeaponSet" Style="{StaticResource ControllerHoldButtonStyle}" Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UISelectionLeft'}"
								 Command="{Binding SwitchWeaponSetCommand}"
								 Tag="{Binding Source='h7f2d9806g87bdg42a3g934ag9d051a036638', Converter={StaticResource TranslatedStringConverter}}" HorizontalContentAlignment="Left" VerticalAlignment="Center" EatInput="False" HorizontalAlignment="Left" Margin="10,0,20,0" Width="1000"/>

				<!-- Toggle Dual Wield -->
				<ls:LSButton x:Name="ToggleDualWield"
							 BoundEvent="UISelectionRight"
							 Style="{StaticResource ControllerHoldButtonStyle}" Command="{Binding ToggleDualWieldingCommand}"
							 Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UISelectionRight, Converter={StaticResource FindInputEventConverter}}"
							 Tag="{Binding Source='hfd571216g8e69g4699g8396gb764f90db389', Converter={StaticResource TranslatedStringConverter}}" HorizontalContentAlignment="Left" VerticalAlignment="Center" EatInput="False" HorizontalAlignment="Left" Margin="10,0,20,0" Width="1000"/>

				<ls:LSButton x:Name="UseSlotBinding" Command="{Binding UseSlotCommand}" CommandParameter="{Binding Tag, ElementName=ActionRadials}" Height="0" BoundEvent="UIAccept" HorizontalAlignment="Left" />

				<ls:LSButton x:Name="CancelButton" BoundEvent="UICancel" Command="{Binding ClearSingleHotbarCommand}" Tag="{Binding Source='h01d5c470g61bfg498cgb17eg7be425444fa5', Converter={StaticResource TranslatedStringConverter}}"
								 ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}" HorizontalContentAlignment="Left" HorizontalAlignment="Left" Width="1000">
					<b:Interaction.Triggers>
						<b:EventTrigger EventName="LSButtonReleased">
							<b:InvokeCommandAction Command="{Binding ActionCancelCommand}"/>
							<ls:SetMoveFocusAction TargetName="ActionRadials" FocusElement="{Binding ElementName=HotBarList, Path=Tag}"/>
						</b:EventTrigger>
					</b:Interaction.Triggers>
				</ls:LSButton>

				<ls:LSInputBinding x:Name="PinTooltipBinding" Style="{StaticResource PinTooltipBindingStyle}" BoundEvent="UIShowInfo"/>

				<ls:LSInputBinding x:Name="ShortcutMenuBinding" Command="{Binding CustomEvent}" BoundEvent="PanelSelect" CommandParameter="ToggleShortcutMenu"/>
			</ls:AlignableWrapPanel>
		</Grid>
	   
		<ControlTemplate.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Tag.SlotType, ElementName=ActionRadials}" Value="Character"/>
					<Condition Binding="{Binding Tag.GameObject.Name, ElementName=ActionRadials, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString'}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ActionButton" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionDetailsPanel" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionButtonDescription" Property="Text" Value="{Binding Tag.GameObject.Name, ElementName=ActionRadials}"/>
				<Setter TargetName="ActionButtonTooltipDescription" Property="Text" Value="{Binding Tag.GameObject.Name, ElementName=ActionRadials}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Tag.SlotType, ElementName=ActionRadials}" Value="Item"/>
					<Condition Binding="{Binding Tag.GameObject.Name, ElementName=ActionRadials, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString'}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ActionButton" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionDetailsPanel" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionButtonDescription" Property="Text" Value="{Binding Tag.GameObject.Name, ElementName=ActionRadials}"/>
				<Setter TargetName="ActionButtonTooltipDescription" Property="Text" Value="{Binding Tag.GameObject.Name, ElementName=ActionRadials}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Tag.SlotType, ElementName=ActionRadials}" Value="Passive"/>
					<Condition Binding="{Binding Tag.Passive.Name, ElementName=ActionRadials, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString'}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ActionButton" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionDetailsPanel" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionButtonDescription" Property="Text" Value="{Binding Tag.Passive.Name, ElementName=ActionRadials}"/>
				<Setter TargetName="ActionButtonTooltipDescription" Property="Text" Value="{Binding Tag.Passive.Name, ElementName=ActionRadials}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Tag.SlotType, ElementName=ActionRadials}" Value="Action"/>
					<Condition Binding="{Binding Tag.Spell.Name, ElementName=ActionRadials, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString'}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ActionButton" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionDetailsPanel" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionButtonDescription" Property="Text" Value="{Binding Tag.Spell.Name, ElementName=ActionRadials}"/>
				<Setter TargetName="ActionButtonTooltipDescription" Property="Text" Value="{Binding Tag.Spell.Name, ElementName=ActionRadials}"/>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Tag.SlotType, ElementName=ActionRadials}" Value="Spell"/>
					<Condition Binding="{Binding Tag.Spell.Name, ElementName=ActionRadials, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString'}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ActionButton" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionDetailsPanel" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ActionButtonDescription" Property="Text" Value="{Binding Tag.Spell.Name, ElementName=ActionRadials}"/>
				<Setter TargetName="ActionButtonTooltipDescription" Property="Text" Value="{Binding Tag.Spell.Name, ElementName=ActionRadials}"/>
			</MultiDataTrigger>

			<DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.IsDualWieldingAllowed}" Value="False">
				<Setter TargetName="ToggleDualWield" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.HasRangedAttack}" Value="False">
				<Setter TargetName="ToggleWeaponSet" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding Path=Tag.SlotType, ElementName=ActionRadials, FallbackValue='Empty'}" Value="Empty">
				<Setter TargetName="PinTooltipBinding" Property="IsEnabled" Value="False"/>
				<Setter TargetName="UseSlotBinding" Property="IsEnabled" Value="False"/>
			</DataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=Tag.SlotType, ElementName=ActionRadials, FallbackValue='Empty'}" Value="Passive"/>
					<Condition Binding="{Binding Path=Tag.IsActive, ElementName=ActionRadials}" Value="False"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="UpcastInfo" Property="Text" Value="{Binding Source='h3c3302abg1c02g464bg9ab9gd08b0b067ff7',Converter={StaticResource TranslatedStringConverter}}"/>
				<Setter TargetName="UpcastInfo" Property="Visibility" Value="Visible"/>
				<Setter TargetName="UpcastInfo" Property="Foreground" Value="{StaticResource LS_disabledPadTxtColor}"/>
				<Setter TargetName="UpcastInfo" Property="FontStyle" Value="Italic"/>
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=Tag.SlotType, ElementName=ActionRadials, FallbackValue='Empty'}" Value="Passive"/>
					<Condition Binding="{Binding Path=Tag.IsActive, ElementName=ActionRadials}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="UpcastInfo" Property="Text" Value="{Binding Source='h7f57c6ebgf4eag4c09g8380gc00371385c82',Converter={StaticResource TranslatedStringConverter}}"/>
				<Setter TargetName="UpcastInfo" Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
				<Setter TargetName="UpcastInfo" Property="Visibility" Value="Visible"/>
				<Setter TargetName="UpcastInfo" Property="FontStyle" Value="Italic"/>
			</MultiDataTrigger>

			<DataTrigger Binding="{Binding Path=Tag, ElementName=ActionRadials, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
				<Setter TargetName="ShowContextMenu" Property="Tag" Value="{Binding Source='he3f4fe5cga90ag4438g8f5bg79c19473e30a',Converter={StaticResource TranslatedStringConverter}}"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding Path=Tag, ElementName=ActionRadials, Converter={StaticResource TypeConverter}}" Value="ls.PageView">
				<Setter TargetName="ShowContextMenu" Property="Tag" Value="{Binding Source='h921d24b9g4a44g441agbbbag176eef91b713',Converter={StaticResource TranslatedStringConverter}}"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.MetamagicActive}" Value="True">
				<Setter TargetName="MetaMagicDisplay" Property="Visibility" Value="Visible"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding SingleHotBar.SlotList.Count, Converter={StaticResource GreaterThanConverter},ConverterParameter=0}" Value="True">
				<Setter TargetName="singleBarHolder" Property="Visibility" Value="Visible"/>
				<Setter TargetName="MainHotbarListHolder" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding IsShowingAContainerWithVariants}" Value="True">
				<Setter TargetName="RadialTypeText" Property="Text" Value="{Binding Source='h79b6dc4egf450g4037gad34g8bfd57289b9a', Converter={StaticResource TranslatedStringConverter}}"/>
				<Setter TargetName="RadialTypeText" Property="Visibility" Value="Visible"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding IsSelectingUpcastedSpell}" Value="True">
				<Setter TargetName="RadialTypeText" Property="Text" Value="{Binding Source='hcc0de24fgee83g49cdgb15fg2fa9b96203c9', Converter={StaticResource TranslatedStringConverter}}"/>
				<Setter TargetName="RadialTypeText" Property="Visibility" Value="Visible"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding AssigningSlot}" Value="True">
				<Setter TargetName="ActionDescriptionSection" Property="Visibility" Value="Collapsed"/>
				<Setter TargetName="ActionDetailsPanel" Property="Visibility" Value="Collapsed"/>
				<Setter TargetName="ButtonHintsContainer" Property="Visibility" Value="Collapsed"/>
				<Setter TargetName="ActionButton" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding Path=Tag.GameObject, ElementName=ActionRadials, Converter={StaticResource NullToBoolFalseConverter}, FallbackValue={x:Null}}" Value="True">
				<Setter TargetName="ActionDetails" Property="DataContext" Value="{Binding Tag.GameObject, ElementName=ActionRadials}"/>
				<Setter TargetName="SpellWarnings" Property="DataContext" Value="{Binding Tag.GameObject, ElementName=ActionRadials}"/>
				<Setter TargetName="ActionDetails" Property="Visibility" Value="Visible"/>
				<Setter TargetName="SpellWarnings" Property="Visibility" Value="Visible"/>
				<Setter TargetName="MetamagicLabel" Property="DataContext" Value="{Binding Tag.GameObject, ElementName=ActionRadials}"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding Path=Tag.Spell, ElementName=ActionRadials, Converter={StaticResource NullToBoolFalseConverter}, FallbackValue={x:Null}}" Value="True">
				<Setter TargetName="ActionDetails" Property="DataContext" Value="{Binding Tag.Spell, ElementName=ActionRadials}"/>
				<Setter TargetName="SpellWarnings" Property="DataContext" Value="{Binding Tag.Spell, ElementName=ActionRadials}"/>
				<Setter TargetName="ActionDetails" Property="Visibility" Value="Visible"/>
				<Setter TargetName="SpellWarnings" Property="Visibility" Value="Visible"/>
				<Setter TargetName="MetamagicLabel" Property="DataContext" Value="{Binding Tag.Spell, ElementName=ActionRadials}"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding Tag.Spell.CostSummary.Count, ElementName=ActionRadials, Converter={StaticResource GreaterThanConverter}, ConverterParameter='0', FallbackValue=False}" Value="True">
				<Setter TargetName="ActionCostSection" Property="Visibility" Value="Visible" />
			</DataTrigger>
			<DataTrigger Binding="{Binding Tag.GameObject.CostSummary.Count, ElementName=ActionRadials, Converter={StaticResource GreaterThanConverter}, ConverterParameter='0', FallbackValue=False}" Value="True">
				<Setter TargetName="ActionCostSection" Property="Visibility" Value="Visible" />
			</DataTrigger>

			<DataTrigger Binding="{Binding Path=Tag.CanUse, ElementName=ActionRadials}" Value="False">
				<Setter TargetName="ActionButtonIcon" Property="Opacity" Value="0.75"/>
				<Setter TargetName="ActionButtonDescription" Property="Opacity" Value="0.75"/>
				<Setter TargetName="ActionButtonTooltipDescription" Property="Opacity" Value="0.75"/>
				<Setter TargetName="UseSlotBinding" Property="IsEnabled" Value="{Binding Tag.Spell.IsContainer, ElementName=ActionRadials, FallbackValue=False}"/>
				<Setter TargetName="RadialActionErrorMessage" Property="Visibility" Value="Visible" />
			</DataTrigger>

			<!-- Spell modifiers -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Tag.Spell.SpellModifier, ElementName=ActionRadials, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
					<Condition Binding="{Binding CurrentSingleHotbarFilter, Converter={StaticResource NullToBoolTrueConverter}, ConverterParameter='EmptyString'}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<!-- Ignore CanUse, since this is a fake container -->
				<Setter TargetName="ActionButtonIcon" Property="Opacity" Value="1"/>
				<Setter TargetName="ActionButtonDescription" Property="Opacity" Value="1"/>
				<Setter TargetName="ActionButtonTooltipDescription" Property="Opacity" Value="1"/>
				<Setter TargetName="UseSlotBinding" Property="IsEnabled" Value="True"/>
				<Setter TargetName="RadialActionErrorMessage" Property="Visibility" Value="Collapsed" />
			</MultiDataTrigger>

			<DataTrigger Binding="{Binding Path=ActualHeight, ElementName=SpellWarnings, Converter={StaticResource GreaterThanConverter}, ConverterParameter=50}" Value="True">
				<Setter TargetName="RadialActionErrorMessage" Property="Visibility" Value="Collapsed" />
			</DataTrigger>

			<DataTrigger Binding="{Binding Path=ActualHeight, ElementName=CapabilitiesErrors, Converter={StaticResource GreaterThanConverter}, ConverterParameter=50}" Value="True">
				<Setter TargetName="RadialActionErrorMessage" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="SpellWarnings" Property="Visibility" Value="Collapsed" />
			</DataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding SingleHotBar.SlotList.Count}" Value="0"/>
					<Condition Binding="{Binding IsShowingItemsToThrow}" Value="False"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="CancelButton" Property="Command" Value="{Binding CustomEvent}"/>
				<Setter TargetName="CancelButton" Property="CommandParameter" Value="CloseWidget"/>
				<Setter TargetName="CancelButton" Property="Tag" Value="{Binding Source='h411fb88eg5261g437aga291g2fb260e633c6', Converter={StaticResource TranslatedStringConverter}}"/>
			</MultiDataTrigger>

			<DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.IsShapeShifted}" Value="True">
				<Setter TargetName="CancelButton" Property="Command" Value="{Binding CustomEvent}"/>
				<Setter TargetName="CancelButton" Property="CommandParameter" Value="CloseWidget"/>
				<Setter TargetName="CancelButton" Property="Tag" Value="{Binding Source='h411fb88eg5261g437aga291g2fb260e633c6', Converter={StaticResource TranslatedStringConverter}}"/>
				<Setter TargetName="ShowContextMenu" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterType}" Value="Summon">
				<Setter TargetName="CancelButton" Property="Command" Value="{Binding CustomEvent}"/>
				<Setter TargetName="CancelButton" Property="CommandParameter" Value="CloseWidget"/>
				<Setter TargetName="CancelButton" Property="Tag" Value="{Binding Source='h411fb88eg5261g437aga291g2fb260e633c6', Converter={StaticResource TranslatedStringConverter}}"/>

				<Setter TargetName="ShowContextMenu" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterType}" Value="Follower">
				<Setter TargetName="CancelButton" Property="Command" Value="{Binding CustomEvent}"/>
				<Setter TargetName="CancelButton" Property="CommandParameter" Value="CloseWidget"/>
				<Setter TargetName="CancelButton" Property="Tag" Value="{Binding Source='h411fb88eg5261g437aga291g2fb260e633c6', Converter={StaticResource TranslatedStringConverter}}"/>
				<Setter TargetName="ShowContextMenu" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding InSwapSlotState}" Value="True">
				<Setter TargetName="CancelButton" Property="Command" Value="{Binding UseSlotCommand}"/>
				<Setter TargetName="CancelButton" Property="CommandParameter" Value="{x:Null}"/>
				<Setter TargetName="CancelButton" Property="Tag" Value="{Binding Source='h01d5c470g61bfg498cgb17eg7be425444fa5', Converter={StaticResource TranslatedStringConverter}}"/>
				<Setter TargetName="UseSlotBinding" Property="Command" Value="{x:Null}"/>
				<Setter TargetName="UseSlotBinding" Property="EatInput" Value="False"/>
				<Setter TargetName="ActionButton" Property="Visibility" Value="Hidden"/>
				<Setter TargetName="SwapSlotHint" Property="Visibility" Value="Visible"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding IsShowingItemsToThrow}" Value="True">
				<Setter TargetName="RadialTypeText" Property="Text" Value="{Binding Source='he2954eb6g6074g4b0ag90e9g8f14cc2ee21c', Converter={StaticResource TranslatedStringConverter}}"/>
				<Setter TargetName="RadialTypeText" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ToWorldButton" Property="Visibility" Value="Visible"/>
				<Setter TargetName="singleBarHolder" Property="Visibility" Value="Visible"/>
				<Setter TargetName="MainHotbarListHolder" Property="Visibility" Value="Collapsed"/>
				<Setter TargetName="ShowContextMenu" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="CancelConcentrationButton" Property="Visibility" Value="Collapsed" />
			</DataTrigger>

			<DataTrigger Binding="{Binding IsVisible, ElementName=ActionDetailsPanel}" Value="True">
				<Setter TargetName="ToWorldButton" Property="Visibility" Value="Collapsed"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding Layout}" Value="Left">
				<Setter TargetName="ButtonHintsContainer" Property="Style" Value="{StaticResource ButtonHint.Container.CenterWrap}"/>
				<Setter TargetName="ButtonHintsContainer" Property="Margin" Value="200,1540,200,0" />
				<Setter TargetName="ButtonHintsContainer" Property="Width" Value="Auto" />
				<Setter TargetName="ButtonHintsContainer" Property="Height" Value="500" />
				<Setter TargetName="ButtonHintsContainer" Property="HorizontalAlignment" Value="Center" />
				<Setter TargetName="ButtonHintsContainer" Property="FlowDirection" Value="LeftToRight" />
				<Setter TargetName="ButtonHintsContainer" Property="HorizontalContentAlignment" Value="Center" />
				<Setter TargetName="ButtonHintsContainer" Property="VerticalAlignment" Value="Center" />
				
				<Setter TargetName="SelectButtonVisual" Property="Width" Value="Auto" />
				<Setter TargetName="ShowContextMenu" Property="Width" Value="Auto" />
				<Setter TargetName="ShowContextMenu" Property="HorizontalAlignment" Value="Center" />
				<Setter TargetName="ShowContextMenu" Property="HorizontalContentAlignment" Value="Center" />
				<Setter TargetName="CancelConcentrationButton" Property="Width" Value="Auto" />
				<Setter TargetName="ToggleWeaponSet" Property="Width" Value="Auto" />
				<Setter TargetName="ToggleDualWield" Property="Width" Value="Auto" />
				<Setter TargetName="ControlNotifcations" Property="Margin" Value="0,0,0,190" />
				<Setter TargetName="ToggleWeaponSet" Property="Margin" Value="0,0,20,0" />
				<Setter TargetName="ToggleDualWield" Property="Margin" Value="0,0,0,0" />
				<Setter TargetName="CancelConcentrationButton" Property="Margin" Value="0,0,0,0" />
				<Setter TargetName="CancelButton" Property="Margin" Value="0,200,0,0" />
				<Setter TargetName="CancelButton" Property="ContentTemplate" Value="{x:Null}" />
				<Setter TargetName="CancelButton" Property="Content" Value="{x:Null}" />
			</DataTrigger>

			<DataTrigger Binding="{Binding Layout}" Value="Right">
				<Setter TargetName="ButtonHintsContainer" Property="Style" Value="{StaticResource ButtonHint.Container.CenterWrap}"/>
				<Setter TargetName="ButtonHintsContainer" Property="Margin" Value="200,1540,200,0" />
				<Setter TargetName="ButtonHintsContainer" Property="Width" Value="Auto" />
				<Setter TargetName="ButtonHintsContainer" Property="Height" Value="500" />
				<Setter TargetName="ButtonHintsContainer" Property="HorizontalAlignment" Value="Center" />
				<Setter TargetName="ButtonHintsContainer" Property="FlowDirection" Value="LeftToRight" />
				<Setter TargetName="ButtonHintsContainer" Property="HorizontalContentAlignment" Value="Center" />
				<Setter TargetName="ButtonHintsContainer" Property="VerticalAlignment" Value="Center" />

				<Setter TargetName="SelectButtonVisual" Property="Width" Value="Auto" />
				<Setter TargetName="ShowContextMenu" Property="Width" Value="Auto" />
				<Setter TargetName="CancelConcentrationButton" Property="Width" Value="Auto" />
				<Setter TargetName="ToggleWeaponSet" Property="Width" Value="Auto" />
				<Setter TargetName="ToggleDualWield" Property="Width" Value="Auto" />

				<Setter TargetName="ControlNotifcations" Property="Margin" Value="0,0,0,190" />
				<Setter TargetName="ToggleWeaponSet" Property="Margin" Value="0,0,20,0" />
				<Setter TargetName="ToggleDualWield" Property="Margin" Value="0,0,0,0" />
				<Setter TargetName="CancelConcentrationButton" Property="Margin" Value="0,0,0,0" />
				<Setter TargetName="CancelButton" Property="Margin" Value="0,200,0,0" />
				<Setter TargetName="CancelButton" Property="ContentTemplate" Value="{x:Null}" />
				<Setter TargetName="CancelButton" Property="Content" Value="{x:Null}" />
				<Setter TargetName="uiHintContainer" Property="Margin" Value="1000,-110,0,0" />
				<Setter TargetName="ActionDetailsPanel" Property="Padding" Value="240,12,240,12" />
			</DataTrigger>

			<!-- Position the button prompts to the left for player 2 merged split screen -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Layout}" Value="Common" />
					<Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ButtonHintsContainer" Property="Style" Value="{ StaticResource ButtonHint.Container.CenterWrap}"/>
				<Setter TargetName="ButtonHintsContainer" Property="HorizontalAlignment" Value="Left"/>
				<Setter TargetName="ButtonHintsContainer" Property="HorizontalContentAlignment" Value="Left"/>
				<Setter TargetName="ButtonHintsContainer" Property="Width" Value="1000"/>
				<Setter TargetName="ButtonHintsContainer" Property="FlowDirection" Value="LeftToRight" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Layout}" Value="Left"/>
					<Condition Binding="{Binding Visibility, ElementName=ActionDetailsPanel}" Value="Visible"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ToggleWeaponSet" Property="Visibility" Value="Hidden" />
				<Setter TargetName="ToggleWeaponSet" Property="IsEnabled" Value="False" />
				<Setter TargetName="ToggleDualWield" Property="Visibility" Value="Hidden" />
				<Setter TargetName="ToggleDualWield" Property="IsEnabled" Value="False" />
				<Setter TargetName="CancelConcentrationButton" Property="Visibility" Value="Hidden" />
				<Setter TargetName="CancelConcentrationButton" Property="IsEnabled" Value="False" />
				<Setter TargetName="ActionDetailsPanel" Property="Padding" Value="240,12,240,12" />
				<Setter TargetName="ShowContextMenu" Property="Opacity" Value="0" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Layout}" Value="Right"/>
					<Condition Binding="{Binding Visibility, ElementName=ActionDetailsPanel}" Value="Visible"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ToggleWeaponSet" Property="Visibility" Value="Hidden" />
				<Setter TargetName="ToggleWeaponSet" Property="IsEnabled" Value="False" />
				<Setter TargetName="ToggleDualWield" Property="Visibility" Value="Hidden" />
				<Setter TargetName="ToggleDualWield" Property="IsEnabled" Value="False" />
				<Setter TargetName="CancelConcentrationButton" Property="Visibility" Value="Hidden" />
				<Setter TargetName="CancelConcentrationButton" Property="IsEnabled" Value="False" />
				<Setter TargetName="ShowContextMenu" Property="Opacity" Value="0" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Layout}" Value="Common"/>
					<Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource LessThanConverter}, ConverterParameter=0.75}" Value="True"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="SelectButtonVisual" Property="Visibility" Value="Visible" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
					<Condition Binding="{Binding Data.IsCameraSplit}" Value="False"/>
					<Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="1"/>
					<Condition Binding="{Binding Data.LocalPlayers[1].UIData.ActiveState}" Value="PlayerPortraitsActive"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ButtonHintsContainer" Property="Opacity" Value="0" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
					<Condition Binding="{Binding Data.IsCameraSplit}" Value="False"/>
					<Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
					<Condition Binding="{Binding Data.LocalPlayers[0].UIData.ActiveState}" Value="PlayerPortraitsActive"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ButtonHintsContainer" Property="Opacity" Value="0" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
					<Condition Binding="{Binding Data.IsCameraSplit}" Value="False"/>
					<Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="1"/>
					<Condition Binding="{Binding Data.LocalPlayers[1].UIData.ActiveState}" Value="ShortcutMenu"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ButtonHintsContainer" Property="Opacity" Value="0" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
					<Condition Binding="{Binding Data.IsCameraSplit}" Value="False"/>
					<Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
					<Condition Binding="{Binding Data.LocalPlayers[0].UIData.ActiveState}" Value="ShortcutMenu"/>
				</MultiDataTrigger.Conditions>
				<Setter TargetName="ButtonHintsContainer" Property="Opacity" Value="0" />
			</MultiDataTrigger>

			<EventTrigger RoutedEvent="FrameworkElement.Loaded">
				<BeginStoryboard x:Name="WidgetFadeInAnim">
					<Storyboard FillBehavior="Stop">
						<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"  Storyboard.TargetName="fadeInRadials">
							<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
							<EasingDoubleKeyFrame KeyTime="0:0:0.12" Value="1"/>
						</DoubleAnimationUsingKeyFrames>
					</Storyboard>
				</BeginStoryboard>
			</EventTrigger>
			<EventTrigger RoutedEvent="FrameworkElement.Unloaded">
				<StopStoryboard BeginStoryboardName="WidgetFadeInAnim"/>
			</EventTrigger>



			<!-- Shortcuts -->
			<DataTrigger Binding="{Binding Tag.Spell.ActionId, ElementName=ActionRadials}" Value="Jump">
				<Setter TargetName="ShortcutText" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ShortcutText" Property="ls:AttachedProperties.InheritedTag" Value="[IE_Jump]"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding Tag.Spell.ActionId, ElementName=ActionRadials}" Value="Hide">
				<Setter TargetName="ShortcutText" Property="Visibility" Value="Visible"/>
				<Setter TargetName="ShortcutText" Property="ls:AttachedProperties.InheritedTag" Value="[IE_ToggleSneak]"/>
				<Setter TargetName="ShortcutText" Property="Tag" Value="h643ff96cg564dg4b8cg892bga492460d06b0"/>
			</DataTrigger>

		</ControlTemplate.Triggers>
	</ControlTemplate>
</ResourceDictionary>
